<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Launch Certification Rule">
          
    
    <Description>Tests Application Connection</Description>
          
    
    <Source><![CDATA[
		
			import sailpoint.api.CertificationScheduler;
			import sailpoint.object.CertificationDefinition;
			import sailpoint.object.Identity;
			import sailpoint.object.CertificationSchedule;
			import sailpoint.object.TaskResult;
			import sailpoint.object.TaskSchedule;
			import sailpoint.api.SailPointContext;
			import sailpoint.object.Application;
			import sailpoint.object.QueryOptions;
			import sailpoint.object.Filter;
			import sailpoint.object.Link;
			import sailpoint.object.Attributes;
			import java.text.SimpleDateFormat;
			import sailpoint.tools.Util;
			import java.util.*;
			import org.apache.commons.logging.LogFactory;
			import org.apache.commons.logging.Log;
import sailpoint.tools.GeneralException;
				
			private static Log logger = LogFactory.getLog("rule.Element.Certification.ELE_Launch_Targeted _Certification_Rule");
							
								
								
			public static void launchTargetedCert(SailPointContext context, String certOwnerName, String certDefinitionName) {
        System.out.println("launchTargetedCert strted  :"+ certOwnerName   + "    " +certDefinitionName );

				try{ 
					/* Get all the needed arguments for launching
					* access review - Requester, Identity and Certifier
					*/
					Identity requestor = context.getObject(Identity.class, certOwnerName); 
          System.out.println("requestor  :"+ requestor);
					Identity certGroupOwner = context.getObjectByName(Identity.class, certOwnerName); 
          System.out.println("requestor  :"+ requestor);
					/*
					*Geting the existing template for review and cloning it.
					*/
					CertificationDefinition templateCert = context.getObjectByName(CertificationDefinition.class, certDefinitionName);
          System.out.println("templateCert  :"+ templateCert);
					String certName = certDefinitionName.substring(0,certDefinitionName.indexOf("Template")-1);
          System.out.println("certName  :"+ certName);
					System.out.println("templateCert :"+ templateCert);
					CertificationDefinition definition = (CertificationDefinition) templateCert.derive(context);

					System.out.println("definition :"+ definition);
					definition.setCertificationOwner(certGroupOwner); 
					definition.setOwner(requestor);
					definition.setDescription("Targeted Certification");
					System.out.println(" after definition :"+ definition);
					SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YY HH:mm");
					Calendar c = Calendar.getInstance();
					String dt = sdf.format(c.getTime());  // dt is now the new date
					definition.setName(certName + " [" +dt+ "]"); 
					context.saveObject(definition);
					context.commitTransaction();
					/*
					* Get the certification Schedule from definition and build the
					* TaskSchedule to run it immediately.
					*/
					CertificationSchedule certSchedule =new CertificationSchedule(context, requestor, definition);
					System.out.println(" certSchedule :"+ certSchedule);
					certSchedule.setRunNow(true); 
					CertificationScheduler scheduler = new CertificationScheduler(context); 
					TaskSchedule taskSchedule = scheduler.saveSchedule(certSchedule, false);
					System.out.println(" taskSchedule :"+ taskSchedule);
					
				}catch(GeneralException e){
					if(logger.isDebugEnabled()) logger.debug("Below exception occurred during generation of access review ");
					System.out.println(e.getMessage());
				}
			}
System.out.println("config :"+ config);
			String certOwnerName=config.get("identity");

			String certDefinitionName=config.get("certificationDefinition");
System.out.println("certOwnerName :"+ certOwnerName);
System.out.println("certDefinitionName :"+ certDefinitionName);

			launchTargetedCert(context, certOwnerName, certDefinitionName);

		
  
	]]></Source>
        

</Rule>
