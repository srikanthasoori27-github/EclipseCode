<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="ELE_Blackline_Before_Operation_Rule" type="WebServiceBeforeOperationRule">
  <Description>This rule is used by the  Web Services connector before performing any operation like testconnection, aggregation etc. Here user can update the existing Endpoint object using a key 'updatedEndPoint' and along with it save 
required attribute in the application using key 'connectorStateMap'. If user just want to return Endpoint (requestEndPoint) no need to create map and update the key values. But if a user wants to return both Endpoint (requestEndPoint) and connectorStateMap who's values will be eventually saved in the application. Create a Map and add both using respective key's.</Description>
  <Signature returnType="Object">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="application">
        <Description>The application whose data file is being processed.</Description>
      </Argument>
      <Argument name="requestEndPoint">
        <Description>The current request information contain header, body, context url, method type, response attribute map, 
                successful response code
                </Description>
      </Argument>
      <Argument name="oldResponseMap">
        <Description>earlier response object </Description>
      </Argument>
      <Argument name="restClient">
        <Description>REST Client Object</Description>
      </Argument>
      <Argument name="provisioningPlan">
        <Description>provisioningPlan can be used to update the payload of the http request. Provisioning Plan has an account request which defines the operation to be performed on the account.
                 An account request can contain multiple attributes requests and each attribute request represents an operation on a single account attribute.
                </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="Endpoint or Updated Map which contains requestEndPoint and connectorStateMap">
        <Description>Updated Endpoint or information Map which contains endpoint and connectorStateMap</Description>
      </Argument>
    </Returns>
  </Signature>
  <Source><![CDATA[
  	import org.apache.commons.logging.Log;
	import org.apache.commons.logging.LogFactory;
	import org.apache.commons.text.StringEscapeUtils;
	import sailpoint.object.Application;
	import java.util.HashMap;
	
	import com.google.gson.internal.LinkedTreeMap;
	import connector.common.JsonUtil;
	import sailpoint.connector.webservices.EndPoint;
	import sailpoint.connector.webservices.WebServicesClient;
	Log log = LogFactory.getLog("rule.ele_before_blackline_operation");
	
public String getContextUrlForReportCall(String response){
	System.out.println("getContextUrlForReportCall START: ");
	int reportID = 0;
	//String url = "/api/completedqueryrun/1454676/csv";
	JsonUtil jsonUtil = new JsonUtil();
	

	System.out.println("B-4 map: " + response);
	List responseList = jsonUtil.toList(response);
	System.out.println("After map: " + responseList);
	System.out.println("After size: " + responseList.size());
	if (responseList != null && responseList.size() > 0){
		System.out.println("Loop " );
			LinkedTreeMap node = responseList.get(0);
			reportID = node.get("id");
			System.out.println("ID: " + reportID);
	}
	return "/api/completedqueryrun/"+reportID+"/csv";
}
public String getQueryRun(String baseUrl){
	
	System.out.println("getQueryRun START");
	
	System.out.println("baseUrl: "+baseUrl);
	Map hMap = requestEndPoint.getHeader();
	String fullUrl = baseUrl + "/api/queryruns";	
	System.out.println("fullUrl: "+fullUrl);
	
	Map header = new HashMap();
	String authToken = hMap.get("Authorization");
	header.put("Authorization",authToken);
	header.put("Content-Type","application/json");	
	
	List <String> list = new ArrayList();
	list.add("200");
	

	//System.out.println("B-4 Call: " );			
	String response = restClient.executeGet(fullUrl,header,list);
	//System.out.println("After Call: " + response);
	return response;
	}
/**************** Rule starts here *************/	

	System.out.println("ELE_Blackline_Before_Operation_Rule START");
	String name = requestEndPoint.getUniqueNameForEndPoint();
	if (name != null && name.equalsIgnoreCase("Account Aggregation")){	
		String baseUrl = application.getAttributeValue("genericWebServiceBaseUrl");
		String response = getQueryRun(baseUrl);
		
		//String contextUrl = getContextUrlForReportCall(response);
		String contextUrl= "/api/completedqueryrun/1490901/csv";
		System.out.println("Full URL: " + baseUrl+contextUrl);
	 	requestEndPoint.setContextUrl(contextUrl);
		requestEndPoint.setFullUrl(baseUrl+contextUrl);
	 }
	 
	 return requestEndPoint;
  ]]></Source>
</Rule>
