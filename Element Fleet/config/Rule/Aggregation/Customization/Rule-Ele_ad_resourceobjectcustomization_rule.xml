<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="ELE_AD_ResourceObjectCustomization_Rule" type="ResourceObjectCustomization">
    <Description>This rule is configured on the application and is called after the connector has build a ResourceObject from the native application data.
Initially designed for non-rule based connectors to add SPPrivileged flag to an object, but could be used to do any transformations.</Description>
    <Signature returnType="ResourceObject">
        <Inputs>
            <Argument name="log">
                <Description>
          The log object associated with the SailPointContext.
        </Description>
            </Argument>
            <Argument name="context">
                <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
            </Argument>
            <Argument name="object">
                <Description>
          The ResourceObject built by the connector.
        </Description>
            </Argument>
            <Argument name="application">
                <Description>
          Application that references the connector.
        </Description>
            </Argument>
            <Argument name="connector">
                <Description>
          The connector object.
        </Description>
            </Argument>
            <Argument name="state">
                <Description>
          A Map containing state information.
        </Description>
            </Argument>
        </Inputs>
        <Returns>
            <Argument name="resourceObject">
                <Description>
          The updated resource object.
        </Description>
            </Argument>
        </Returns>
    </Signature>
    <Source><![CDATA[
			import sailpoint.object.*;
			import java.util.regex.Pattern;
			import java.util.regex.Matcher;
			String userDN = (String) object.getAttribute("distinguishedName");
			String userId = (String) object.getAttribute("sAMAccountName");
			userDN= userDN.toLowerCase();
			String empType = (String) object.getAttribute("employeeType");
			if(userDN.contains(",ou=element,ou=people,dc=ceinetwork,dc=net")) empType ="Element ACCOUNT";
			if(userDN.contains(",ou=service accounts,")) empType ="SERVICE_ACCOUNT";
			if(userDN.contains(",ou=serviceaccounts,")) empType ="SERVICE_ACCOUNT";
			if(userDN.contains(",ou=netrix contacts,")) {
				empType ="Netrix User";
				Pattern pattern = Pattern.compile("\\d");
				Matcher matcher = pattern.matcher(userId);
				while (matcher.find()) {
					empType="SERVICE_ACCOUNT";
				}		
			}
			if(userDN.contains(",ou=admin accounts,"))  empType ="Admin";
			object.put("employeeType",empType);
			if(userDN.contains(",ou=rooms,")||userDN.contains(",ou=shared mailboxes,")||userDN.contains(",ou=meeting rooms,")|| userDN.contains(",cn=microsoft exchange system objects,")|| userId.startsWith("sm_")|| userId.startsWith("krbtgt_") || userId.startsWith("$")|| userDN.contains(",cn=builtin,")){
				return null;
			}
			return object;
	]]></Source>
</Rule>