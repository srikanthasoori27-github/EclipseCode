<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="GovConnect-Rule-GenerateRoleInputFiles">


  <Source><![CDATA[
import java.io.FileInputStream;
import java.io.FileInputStream;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.commons.lang3.text.WordUtils;
import org.apache.poi.ss.usermodel.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;
import sailpoint.object.TaskDefinition;
import sailpoint.tools.Message;
import sailpoint.object.*;
import sailpoint.tools.GeneralException;
import org.apache.commons.lang3.StringUtils;

TaskDefinition taskDef = context.getObjectByName(TaskDefinition.class,"GovConnect-Task-GenerateRoleImportFiles");

public static String prefix_AD_ITRole=taskDef.getString("prefix_AD_ITRole");
public static String prefix_AAD_ITRole=taskDef.getString("prefix_AAD_ITRole");
public static String prefix_BusinessRole=taskDef.getString("prefix_BusinessRole");

private static String inputFile=taskDef.getString("inputFile");

public static String lineprefix_add_ITRole="Add Role,it,";
public static String lineprefix_add_businessrole="Add Role,business,";
public static String lineprefix_addrequired_businessRole="Add Required,";

public static String parent_it_role=taskDef.getString("parent_it_role");
public static String parent_business_role=taskDef.getString("parent_business_role");

public static String AD_application_name=taskDef.getString("AD_application_name");
public static String AAD_application_name=taskDef.getString("AAD_application_name");
public static String owner=taskDef.getString("owner");

public static String entitlement_attribute_name=taskDef.getString("entitlement_attribute_name");
public static String aad_entitlement_attribute_name=taskDef.getString("aad_entitlement_attribute_name");
public static List ad_it_roles_list=new ArrayList();
public static List aad_it_roles_list=new ArrayList();
public static List business_roles_list=new ArrayList();

public static String ad_it_roles_filepath=taskDef.getString("ad_it_roles_filepath");
public static String aad_it_roles_filepath=taskDef.getString("aad_it_roles_filepath");
public static String business_roles_filepath=taskDef.getString("business_roles_filepath");

public static String rolesInformationTab = taskDef.getString("rolesInformationTab");
public static String locationsMappingTab = taskDef.getString("locationsMappingTab");
public static List errorsList = new ArrayList();




public static String role_info_header=taskDef.getString("role_info_header");
public static String location_info_header=taskDef.getString("location_info_header");

public static String ad_ou_container=taskDef.getString("ad_ou_container");
public static boolean isCompleteADGroupPathSpecified=taskDef.getBoolean("isCompleteADGroupPathSpecified");;
public static String aad_ou_container="OU=Delegation,OU=Groups,OU=Administration,OU=SNSWPILOT,OU=SNSW,OU=Root,DC=GOVD,DC=nsw,DC=gov,DC=au";

public static List excel_role_info_header=new ArrayList();
public static List excel_location_info_header=new ArrayList();

public static void writetocsv(List<String> rows, String fileName, String roleType)  {

  FileWriter csvWriter;
  try {
    csvWriter = new FileWriter(fileName);


    for (String rowData : rows) {
      csvWriter.append(rowData);
      csvWriter.append("\n");
    }

    csvWriter.flush();
    csvWriter.close();

    taskResult.addMessage(roleType+" File generated successfully at path "+fileName);
  } catch (IOException e) {
    errorsList.add("Failure trying to write to csv "+fileName);
    e.printStackTrace();
  }

}


public static void generateADITRoles(String roleNameprefix, String lineprefix, String positonTitle, String location,
                                     String owner, String parent, String application, String attribute, String securityGroups)
  throws IOException {

  //Role prefix + location + BU + postionTitle
  String roleName = getroleName(roleNameprefix, positonTitle, location);
  String line = lineprefix + roleName + "," + roleName + "," + roleName + "," + owner + "," + parent + ","
    + application + "," + attribute + "," + securityGroups;
  ad_it_roles_list.add(line);

  System.out.println(line);
}

public static void generateAADITRoles(String roleNameprefix, String lineprefix, String positonTitle,
                                      String location, String owner, String parent, String application, String attribute, String securityGroups)
  throws IOException {

  // Role prefix + location + BU + postionTitle
  String roleName = getroleName(roleNameprefix, positonTitle, location);
  String line = lineprefix + roleName + "," + roleName + "," + roleName + "," + owner + "," + parent + ","
    + application + "," + attribute + "," + securityGroups;
  aad_it_roles_list.add(line);

  System.out.println(line);

}

public static void generateBusinessRoles(String roleNameprefix, String positonTitle, String location, String owner,
                                         String parent) throws IOException {
  // Add Role,business,Bus Role SNSW Albury SC Concierge,Bus Role SNSW Albury SC
  // Concierge,Bus Role SNSW Albury SC Concierge,spadmin,Business Roles SNSW,,,"
  // Add Required,Bus Role SNSW Albury SC Concierge,IT Role AD SNSW Albury SC
  // Concierge,,,,,,,"
  // Add Required,Bus Role SNSW Albury SC Concierge,IT Role Azure AD SNSW Albury
  // SC Concierge,,,,,,,

  String businessRoleName = getroleName(roleNameprefix, positonTitle, location);
  String addRoleLine = lineprefix_add_businessrole + businessRoleName + "," + businessRoleName + ","
    + businessRoleName + "," + owner + "," + parent + "," + "," + ",";
  String addRequiredLine1 = lineprefix_addrequired_businessRole + businessRoleName + ","
    + getroleName(prefix_AD_ITRole, positonTitle, location) + "," + "," + "," + "," + "," + "," + ",";
  String addRequiredLine2 = lineprefix_addrequired_businessRole + businessRoleName + ","
    + getroleName(prefix_AAD_ITRole, positonTitle, location) + "," + "," + "," + "," + "," + "," + ",";
  String line = addRoleLine + "\n" + addRequiredLine1 + "\n" + addRequiredLine2;
  business_roles_list.add(line);

  //System.out.println(line);
}

private static String getroleName(String prefix, String positonTitle, String location) {
  return prefix + " " + location + " " + positonTitle;
}



private static Map getLocationMapFromSheet(Sheet locationsInfoSheet) {
  Map temp = new HashMap();
  if (locationsInfoSheet == null) {
    //errorsList.add(locationsMappingTab + " is not found in the input file");
    taskResult.addException(new Throwable(locationsMappingTab + " is not found in the input file"));
    return null;
  } else {

    Iterator iterator = locationsInfoSheet.iterator();
    Row header = (Row) iterator.next();

    boolean is_valid_header=isvalidHeader(header, location_info_header);

    if(is_valid_header)
    {
      while (iterator.hasNext()) {

        Row currentRow = (Row) iterator.next();
        Cell cell = currentRow.getCell(0);
    cell.setCellType(Cell.CELL_TYPE_STRING);
    String tempCellLoc= cell.toString();
        temp.put(tempCellLoc, currentRow.getCell(3).toString());

      }
    }
    else
    {
      //errorsList.add("Header mismatch between the excel sheet and the input header in the task "+location_info_header);
      taskResult.addException(new Throwable("Header mismatch between the excel sheet and the input header in the task "+location_info_header));
    }
    return temp;
  }

}

public static void processInputFile() {

  try {
    final String FILE_NAME = inputFile;
    FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));
    Workbook workbook = new XSSFWorkbook(excelFile);
    Sheet rolesInfoSheet = workbook.getSheet(rolesInformationTab);
    Sheet locationsInfoSheet = workbook.getSheet(locationsMappingTab);
    if (rolesInfoSheet != null) {
      Map locationMap = getLocationMapFromSheet(locationsInfoSheet);
      //taskResult.addMessage(locationMap.toString());
      Iterator<Row> iterator = rolesInfoSheet.iterator();
      Row header = iterator.next();
      boolean is_valid_header=isvalidHeader(header,role_info_header);
      if(is_valid_header)
      {
       while (iterator.hasNext()) {

        Row currentRow = iterator.next();
        int rowNum = currentRow.getRowNum() +1;
        if (currentRow != null && currentRow.getCell(0) != null && currentRow.getCell(1) != null && currentRow.getCell(2) != null && currentRow.getCell(3) != null && currentRow.getCell(6) != null && currentRow.getCell(5) != null)
        {

          String businessUnit = currentRow.getCell(0).getStringCellValue();
          String postionTitle = currentRow.getCell(2).getStringCellValue();
          postionTitle=businessUnit+" "+postionTitle;

          Cell cell = currentRow.getCell(1);
          cell.setCellType(Cell.CELL_TYPE_STRING);
          String tempCellLoc= cell.toString();
          String location = (String) locationMap.get(tempCellLoc);
          if ( location!=null)
           {
              location=convertToTileCaseWordUtilsFull(location);
              String ad_groups = currentRow.getCell(5).getStringCellValue();
              String azure_groups = currentRow.getCell(6).getStringCellValue();


             StringJoiner joiner = new StringJoiner("|");
											if(isCompleteADGroupPathSpecified)
											{
												for(String s:StringUtils.substringsBetween(ad_groups , "\"", "\""))
												{
													joiner.add(s.toString());
												}
											}
											else
											{
												for (String s : ad_groups.split(",")) {
													s = "CN=" + s + "," + ad_ou_container;
													joiner.add(s.toString());
												}
											}
				
											ad_groups = "\"" + joiner.toString() + "\"";

                    StringJoiner aad_joiner = new StringJoiner("|");
              for(String s :azure_groups.split(","))
              {
                      String temp =s;
                s=retrieveAzureADgroup(s,AAD_application_name);
                      if(s==null)
                {
                  taskResult.addException(new Throwable(temp+" Azure Group mentioned in the sheet at row Number: "+ rowNum +" is not available in IdentityIQ.The role will be created but without the group membership. Add the group manually to the role." ));
                }
                else
                {
                aad_joiner.add(s.toString());
                }

              }
              azure_groups= "\""+aad_joiner.toString()+"\"";



              generateADITRoles(prefix_AD_ITRole, lineprefix_add_ITRole, postionTitle, location, owner,
                  parent_it_role, AD_application_name, entitlement_attribute_name, ad_groups);
              generateAADITRoles(prefix_AAD_ITRole, lineprefix_add_ITRole, postionTitle, location, owner,
                  parent_it_role, AAD_application_name, aad_entitlement_attribute_name, azure_groups);
              generateBusinessRoles(prefix_BusinessRole, postionTitle, location, owner, parent_business_role);
          }//location condition

          else
          {
             taskResult.addException(new Throwable("Skipping the processing of the row - Not able to find the location value from Locations tab for "+currentRow.getCell(1).toString()+"  at row number "+rowNum));
          }



      }
      else
      {
      taskResult.addException(new Throwable("Skipping the processing of row at " + rowNum
                + " as the row contains Null Values."));
      }
  } // closing while loop for the row iteration
      writetocsv(ad_it_roles_list, ad_it_roles_filepath,"AD IT Roles");
          writetocsv(aad_it_roles_list, aad_it_roles_filepath,"Azure AD IT Roles");
          writetocsv(business_roles_list, business_roles_filepath,"Business Roles");

    }
      else
      {

        taskResult.addException(new Throwable("Header mismatch between the excel sheet and the input header in the task "+role_info_header));
      }
    }


    else {
      taskResult.addException(new Throwable(rolesInformationTab + " is missing in the excel sheet"));
    }
  } catch (FileNotFoundException e) {
    e.printStackTrace();
  } catch (IOException e) {
    e.printStackTrace();
  }

}
private static boolean isvalidHeader(Row header, String info_header) {
  boolean flag=false;
  List temp = new ArrayList();
  Iterator<Cell> cellIterator = header.iterator();

  while (cellIterator.hasNext()) {

    Cell currentCell = cellIterator.next();

    if (currentCell.getCellTypeEnum() == CellType.STRING) {
      temp.add(currentCell.getStringCellValue());
    }

  }

  String excel_header=temp.toString().replace('[', ' ').replace(']', ' ').trim();


  if(excel_header.equals(info_header))
    return true;
  return flag;

}
public static String convertToTileCaseWordUtilsFull(String text) {
    return WordUtils.capitalizeFully(text);
}
public String retrieveAzureADgroup(String displayName,String appName) throws GeneralException
{

  String value=null;

  QueryOptions qo = new QueryOptions();
  qo.addFilter(Filter.eq("displayName", displayName));
  qo.addFilter(Filter.eq("application.name", appName));
  Iterator itr=(Iterator) context.search(ManagedAttribute.class, qo,"value");

  while(itr.hasNext())
  {
  Object []obj=(Object[]) itr.next();

  value=(String) obj[0];
  }


  return value;


}

processInputFile();

]]></Source>
      

</Rule>
