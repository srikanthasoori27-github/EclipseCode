/* (c) Copyright 2015 SailPoint Technologies, Inc., All Rights Reserved. */
package sailpoint.service.scim;

import java.util.List;

import sailpoint.object.Attributes;
import sailpoint.scim.mapping.AttributeMapping;
import sailpoint.tools.Util;
import sailpoint.tools.xml.AbstractXmlObject;
import sailpoint.tools.xml.SerializationMode;
import sailpoint.tools.xml.XMLClass;
import sailpoint.tools.xml.XMLProperty;

/**
 * Defines property mapping of the scim attribute.
 * It defines how to get the attribute value from the target object,
 * and how to set the object property from attribute value.
 * 
 * @author danny.feng
 *
 */
@SuppressWarnings("serial")
@XMLClass
public class AttributePropertyMapping extends AbstractXmlObject implements AttributeMapping {

    /**
     * Name of the scim attribute.
     */
    private String name;
    
    /**
     * Property of the related object.
     */
    private String property;
    
    /**
     * Static value for the scim attribute.
     */
    private String value;

    /**
     * Java class for retrieving the attribute value.
     * Must implement AttributePropertyGetter.
     */
    private String getter;

    /**
     * Java class for query the attribute value.
     * Must implement AttributeFilterModifier.
     */
    private String queryClass;

    /**
     * Java class for setting object property from attribute value.
     * Must implement AttributePropertySetter.
     */
    private String setter;
    
    /**
     * List of containing child attribute property mappings.
     */
    private List<AttributeMapping> childAttributeMappingList;
    
    /**
     * List of attributes/options passed to getters/setters and query classes
     * that modify behavior.
     */
    private Attributes<String, Object> config;

    /**
     * Flag to indicate generated by system.
     * This can be used in upgrader to identify system generated mappings and do cleanup if needed.
     */
    private boolean generatedBySystem = false;


    /**
     * Attribute which enables throwing an error when multiple values have been detected
     * during invocation of the setter class.
     */
    public static final String ATT_ERROR_ON_MULTIPLE_VALUES = "errorOnMultipleValues";
    
    /**
     * Attribute that changes the AttributeRequest default operation from Set to the operation
     * specified in the Attribute value.
     * @see sailpoint.object.ProvisioningPlan.Operation 
     */
    public static final String ATT_OPERATION = "operation";

    /**
     * Attribute which used by queryClass to modify the Filter.
     * This is needed only when queryClass has a different property other than this.property.
     * Like manager.value has "id" as the property, but in the Filter, its property should
     * be "manager.id".
     */
    public static final String ATT_QUERY_CLASS_PROPERTY = "queryClassProperty";

    public AttributePropertyMapping() {
    }
    
    @XMLProperty
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @XMLProperty
    public String getProperty() {
        return property;
    }

    public void setProperty(String property) {
        this.property = property;
    }

    @XMLProperty
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }

    @XMLProperty
    public String getGetter() {
        return getter;
    }

    public void setGetter(String getter) {
        this.getter = getter;
    }

    @XMLProperty
    public String getSetter() {
        return setter;
    }

    public void setSetter(String setter) {
        this.setter = setter;
    }

    @XMLProperty(mode = SerializationMode.INLINE_LIST_UNQUALIFIED)
    public List<AttributeMapping> getChildAttributeMappingList() {
        return childAttributeMappingList;
    }

    public void setChildAttributeMappingList(List<AttributeMapping> childAttributeMappingList) {
        this.childAttributeMappingList = childAttributeMappingList;
    }
    
    /**
     * Retrieves child AttributePropertyMapping based on name.
     * 
     * @param name The name of target child AttributePropertyMapping
     * @return target child AttributePropertyMapping
     */
    public AttributeMapping getChildAttributeMapping(String name) {
        for (AttributeMapping mapping : Util.safeIterable(childAttributeMappingList)) {
            if (Util.nullSafeEq(mapping.getName(), name)) {
                return mapping;
            }
        }
        return null;
    }
    
    /**
     * A Map of attribute options for getters/setters and queryClasses.
     */
    @XMLProperty(mode=SerializationMode.UNQUALIFIED)
    public Attributes<String, Object> getAttributes() {
        return config;
    }

    /**
     * Adds key/value pair to the Attributes.
     * @param key
     * @param value
     */
    public void addAttribute(String key, Object value) {
        if (config == null) {
            config = new Attributes<String, Object>();
        }
        config.put(key, value);
    }
    
    /**
     * Sets the attribute list of options
     */
    public void setAttributes(Attributes<String, Object> config) {
        this.config = config;
    }


    @XMLProperty
    public String getQueryClass() {
        return queryClass;
    }

    public void setQueryClass(String queryClass) {
        this.queryClass = queryClass;
    }

    @XMLProperty
    public boolean isGeneratedBySystem() {
        return generatedBySystem;
    }

    public void setGeneratedBySystem(boolean generatedBySystem) {
        this.generatedBySystem = generatedBySystem;
    }

}
