/* (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. */

package sailpoint.web.system;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.faces.model.SelectItem;

import org.primefaces.model.UploadedFile;

import sailpoint.api.Localizer;
import sailpoint.object.AuditEvent;
import sailpoint.object.Configuration;
import sailpoint.object.SailPointObject;
import sailpoint.server.Auditor;
import sailpoint.server.ImportExecutor;
import sailpoint.server.Importer;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Message;
import sailpoint.tools.Util;
import sailpoint.web.BaseBean;
import sailpoint.web.messages.MessageKeys;

/**
 *
 *
 */
public class ImportBean extends BaseBean {
    
    private static final String IMPORT_RESULTS = "importResults";

    /**
     * The file that is uploaded.
     */
    UploadedFile _uploadFile;

    /**
     * Whether to generate role events.
     */
    boolean _noRoleEvents;

    /**
     * The file that is uploaded for processing localization of object attibutes with the Localizer.
     */
    UploadedFile _uploadLocalizedAttributesFile;
    
    /** 
     * The name of the object being localized (eg: Application, Bundle, Policy...)
     */
    String _uploadLocalizationObjectType;
    
    
    String _uploadLocalizationObjectLocale;
    /**
     * A monitor used to receive the import results
     */
    ImportMonitor _monitor;
    
    /**
     * The results from the file import.
     */
    String _results;
    
    /**
     * Return the uploaded file
     *
     * @return the uploaded file
     */
    public UploadedFile getUploadFile() {
        return _uploadFile;
    }

    /**
     * If the role events need to be generated
     *
     * @return _noRoleEvents
     */
    public boolean isNoRoleEvents() {
        return _noRoleEvents;
    }

    /**
     * Set no role event flag
     *
     * @param noRoleEvents
     */
    public void setNoRoleEvents(boolean noRoleEvents) {
        _noRoleEvents = noRoleEvents;
    }

    /**
     * Set the uploaded file
     *
     * @param uploadFile the uploaded file
     */
    public void setUploadFile(UploadedFile uploadFile) {
        _uploadFile = uploadFile;
    }

    /**
     * Get the import results
     *
     * @return a newline separated string with the import results
     */
    public String getResults() {
        if ( _results == null ) {
            _results = (String)getSessionScope().get(IMPORT_RESULTS);
            getSessionScope().remove(IMPORT_RESULTS);
        }
        
        return _results;
    }

    /**
     * This is a no-op function that is not used since the results are
     * generated by the import process.
     */
    public void setResults() {
        /* noop */
    }
    
    private String validateUpload(UploadedFile file) {
        byte[] fileBytes = new byte[(int) file.getSize()];
        try {
            fileBytes = file.getContents();
        } catch (Throwable ex) {
            addMessage(ex);
        }
        
        String fileData = null;
        try {
            fileData = Util.bytesToString(fileBytes);
        } catch (GeneralException ge) {
            addMessage(ge);
        }
        return fileData;
    }

    /**
     * Return true if role propagation is enabled in system configuration
     * @return
     * @throws GeneralException
     */
    private boolean isRolePropEnabled() throws GeneralException {
        return Util.otob(getContext().getConfiguration().getBoolean(Configuration.ALLOW_ROLE_PROPAGATION));
    }
    
    /**
     * Import the specified file using the server importer.  Results are
     * stored using an import monitor so that they can be displayed.
     *
     * @return a navigation outcome
     */
    private String importObjects() {
        String fileData = this.validateUpload(_uploadFile);

        _monitor = new ImportMonitor();
        Importer importer = new Importer(getContext(), _monitor);
        try {
            boolean allowRolePropagation = !isNoRoleEvents() && isRolePropEnabled();
            importer.setRolePropEnabled(allowRolePropagation);
            importer.importXml(fileData);
            Auditor.log(AuditEvent.ActionImport, _uploadFile.getFileName());
            getContext().commitTransaction();
        } catch (Exception ex) {
            if (ex instanceof GeneralException) {
                GeneralException ge = (GeneralException) ex;
                addMessage(ge.getMessageInstance());
            } else {
                addMessage(new Message(Message.Type.Error,
                        ex.getLocalizedMessage()));
            }
            return null;
        }
        this.createResult();
        return "results";
    }
    
    
    private String importLocalizedAttributes() {
        String fileData = this.validateUpload(_uploadLocalizedAttributesFile);
        
        _monitor = new ImportMonitor();
        Localizer localizer = new Localizer(getContext());
        try {
            localizer.importFile(_uploadLocalizedAttributesFile, _uploadLocalizationObjectType, _uploadLocalizationObjectLocale, _monitor);
            Auditor.log(AuditEvent.ActionImport, _uploadLocalizedAttributesFile.getFileName());
            
        } catch (Exception ex) {
            if (ex instanceof GeneralException) {
                GeneralException ge = (GeneralException) ex;
                addMessage(ge.getMessageInstance());
            } else {
                addMessage(new Message(Message.Type.Error,
                        ex.getLocalizedMessage()));
            }
            return null;
        }
        this.createResult();
        return "results";
    }


    /**
     * Import action that handles either the localizations import or the objects import
     *
     * @return a navigation outcome
     */
    public String importAction() {
        String results = null;
        if ( _uploadFile != null && Util.isNotNullOrEmpty(_uploadFile.getFileName())) {
            results = this.importObjects();
        }
        
        if(_uploadLocalizedAttributesFile != null && Util.isNotNullOrEmpty(_uploadLocalizedAttributesFile.getFileName())) {
            results = this.importLocalizedAttributes();            
            
        } 

        if(results==null) {
            addMessage(new Message(Message.Type.Error,
                                      MessageKeys.IMPORT_FILE_UPLOAD_FAILED));
        }        
        return results;
    }
    
    private void createResult() {
        // place the results in the session so that they will be
        // available for the results display page
        List<Message> messages = _monitor.getMessages();
        if ( messages != null ) {
            StringBuffer buf = new StringBuffer();
            for ( Message msg : messages ) {
                buf.append(getMessage(msg));
                buf.append("\n");
            }
            String results = buf.toString();
            if ( results != null && results.length() > 0 )
                getSessionScope().put(IMPORT_RESULTS, results);
        }
    }

    /**
     * Redisplay the import page allowing another file to be uploaded.
     *
     * @return a navigation outcome
     */
    public String importAnotherAction() {
        return "importAnother";
    }

    /**
     * Cancel the current import and return to the System Setup page
     *
     * @return a navigation outcome
     */
    public String cancelAction() {
        return "cancel";
    }
    
    public UploadedFile getUploadLocalizedAttributesFile() {
        return _uploadLocalizedAttributesFile;
    }

    public void setUploadLocalizedAttributesFile(
            UploadedFile uploadLocalizedAttributesFile) {
        _uploadLocalizedAttributesFile = uploadLocalizedAttributesFile;
    }

    
    
    public String getUploadLocalizationObjectType() {
        return _uploadLocalizationObjectType;
    }

    public void setUploadLocalizationObjectType(String uploadLocalizationObjectType) {
        _uploadLocalizationObjectType = uploadLocalizationObjectType;
    }

    public List<SelectItem> getLocales() {
        Localizer localizer = new Localizer(getContext());
        List<Map<String,String>> locales = localizer.getLocaleList();
        List<SelectItem> localeItems = new ArrayList<SelectItem>();
        for(Map<String,String> locale : locales) {
            SelectItem item = new SelectItem(locale.get("value"), locale.get("displayName"));
            localeItems.add(item);
        }
        return localeItems;
    }

    /**
     * A class used to collect the output of the server importer.
     */
    public static class ImportMonitor implements Importer.Monitor {

        List<Message> _messages = new ArrayList<Message>();

        public ImportMonitor() {
        }
        
        public List<Message> getMessages() {
            return _messages;
        }

        public void includingFile(String fileName) {
            Message msg = new Message(
                                         MessageKeys.IMPORT_INCLUDING_FILE,
                                         fileName);
            _messages.add(msg);

        }

        public void report(SailPointObject obj) {
            Message msg = new Message(
                                         MessageKeys.IMPORT_IMPORTING_OBJECT,
                                         obj.getClass().getSimpleName(),
                                         obj.getName());
            _messages.add(msg);
        }

        public void mergingObject(SailPointObject obj) {
            Message msg = new Message(
                                         MessageKeys.IMPORT_MERGING_OBJECT,
                                         obj.getClass().getSimpleName(),
                                         obj.getName());
            _messages.add(msg);
        }

        public void executing(ImportExecutor executor) {
            Message msg = new Message(
                                         MessageKeys.IMPORT_EXECUTING_CLASS,
                                         executor.getClass().getSimpleName());
            _messages.add(msg);
        }

        public void info(String infoMsg) {
            Message msg = new Message(
                                         MessageKeys.IMPORT_INFO,
                                         infoMsg);
            _messages.add(msg);
        }
        
        public void warn(String msg) {
            info(msg);
        }
        
    }  // class ImportMonitor


    public String getUploadLocalizationObjectLocale() {
        return _uploadLocalizationObjectLocale;
    }

    public void setUploadLocalizationObjectLocale(
            String uploadLocalizationObjectLocale) {
        _uploadLocalizationObjectLocale = uploadLocalizationObjectLocale;
    }
    
}  // class ImportBean
