/**
 * 
 */
package sailpoint.web;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import sailpoint.object.QuickLink;
import sailpoint.service.MessageDTO;
import sailpoint.service.quicklink.QuickLinkLauncher;
import sailpoint.service.quicklink.QuickLinkLauncher.QuickLinkLaunchResult;
import sailpoint.service.quicklink.QuickLinksService;
import sailpoint.tools.GeneralException;
import sailpoint.tools.Message;

/**
 * @author pholcomb
 *
 */
public class QuickLinkExecutorBean extends BaseBean{
	private static final Log log = LogFactory.getLog(QuickLinkExecutorBean.class);
	
	private BaseBean baseBean;
	
	public QuickLinkExecutorBean(BaseBean baseBean) {
		this.baseBean = baseBean;
	}
	
	/**
	 * Inspects the chosen quicklink from the dashboard and processes any
	 * arguments on it.  This allows us to build quicklinks with buckets of
	 * attributes that can store things on the session so that we can navigate
	 * to pages in the ui through our beans.  This can also launch a workflow
	 * or navigate to an external link.
	 * 
	 * @param  link                 The QuickLink to process.
	 * @param  identityId           The ID of the identity for which the workflow
	 *                              was launched, if it was a self service request.
	 * @param  wfIdentitySelection  If true, requires an identity selection
	 *                              before launching the workflow.
	 */
    public String processQuickLink(QuickLink link, String identityId,
                                   boolean wfIdentitySelection)
        throws GeneralException {

        String outcome = null;

        QuickLinkLauncher launcher = new QuickLinkLauncher(getContext(), getLoggedInUser());
        QuickLinkLaunchResult result = launcher.launch(link, wfIdentitySelection, getSessionScope());

        //bug 28429 we have cases where we come in from the old quicklinks (JSF) and we need to add
        //messages directly to the session.  This might go away once these are completely angular
        if (result.getMessages() != null && result.getMessages().size() > 0){
            for (MessageDTO message : result.getMessages()){
                baseBean.addMessageToSession(new Message(message.getMessageOrKey(), message.getStatus()));
            }
            
        }
        
        // If identity selection is required for a workflow, navigate to a special outcome.
        if (result.isSelectIdentitiesForWorkflow()) {
            outcome = calculateWorkflowQuickLinkToken(result);
        }
        else if (null != result.getRedirectUrl()) {
            // If this is an external link, redirect to it and return null as the outcome.
            navigateToUrl(result.getRedirectUrl());
        }
        else if (result.isWorkFlowLaunched()) {
            // If this is a workflow that was launched, either go to the next page if there was one
            // or back to the home page.
            outcome = getWorkflowOutcome(result);
        }
        else {
            // Otherwise, stick the arguments in the session and navigate to the quick link's action.
            if (null != result.getArguments()) {
                for (Map.Entry<String,Object> entry : result.getArguments().entrySet()) {
                    baseBean.getSessionScope().put(entry.getKey(), entry.getValue());
                }
            }
            outcome = result.getAction();
        }

        return outcome;
    }

    /**
     * Return a token that can convey that we are executing a workflow for the
     * given QuickLink.
     */
    public static String calculateWorkflowQuickLinkToken(QuickLinkLaunchResult result) {
        return QuickLink.ACTION_WORKFLOW + ":" + result.getQuickLinkName();
    }

    /**
     * Return a QuickLink from the given token if this was a workflow QuickLink
     * token generated by calculateWorkflowQuickLinkToken(), otherwise return
     * null.
     */
    public QuickLink getWorkflowQuicklink(String token) throws GeneralException {
        QuickLink link = null;
        int idx = token.indexOf(':');
        if (idx > -1) {
            String quickLinkName = token.substring(idx+1);
            
            QuickLinksService svc =
                new QuickLinksService(baseBean.getContext(), baseBean.getLoggedInUser(), baseBean.getSessionScope());
            link = svc.getQuickLink(quickLinkName);
            if (null == link) {
                throw new GeneralException("Could not find QuickLink: " + quickLinkName);
            }
        }
        return link;
    }

    /**
     * Launch the workflow for the given QuickLink with the given identityId
     * and identityIds.  This is called after identity selection has been done
     * by the RequestPopulationBean.
     */
    public String launchWorkflow(QuickLink link, String identityId,
                                 List<String> identityIds)
        throws GeneralException {

        if (!QuickLink.ACTION_WORKFLOW.equals(link.getAction())) {
            throw new GeneralException("Expected a workflow QuickLink: " + link);
        }

        QuickLinkLauncher launcher = new QuickLinkLauncher(getContext(), getLoggedInUser());
        QuickLinkLaunchResult result =
            launcher.launchWorkflow(link, identityId, identityIds, getSessionScope());

        // Go to the next page or the action string.
        return getWorkflowOutcome(result);
    }

    /**
     * Return the JSF navigation string from the given QuickLinkLaunchResult that is the result of
     * launching a workflow.
     */
    private static String getWorkflowOutcome(QuickLinkLaunchResult result) {
        // Go to the next page if one was returned (eg - if a work item is required), otherwise go
        // back to the home page.
        return (null != result.getNextPage()) ? result.getNextPage() : NAV_OUTCOME_HOME;
    }

    /**
     * Redirect to the given URL, logging any exceptions.
     */
    private void navigateToUrl(String url) {
        try {
            URI redirectURI = new URI(url);
            String redirectURLString = url;

            // check if the url is absolute or relative. if it contains a scheme component like [http:], [file:] it is
            // considered absolute
            if (!redirectURI.isAbsolute()) {
                // for relative urls normalize and prepend base context path
                redirectURLString = getRequestContextPath() + "/" + redirectURI.normalize().toString();
            }

            this.baseBean.redirect(redirectURLString);
        }
        catch (IOException ioe) {
            log.warn("Exception encountered during processing external quicklink.  Exception: " + ioe.getMessage(), ioe);
        }
        catch (URISyntaxException use) {
            log.warn("Invalid uri for external quick link: " + url, use);
        }
    }
}
