package sailpoint.api.certification;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import sailpoint.api.ObjectUtil;
import sailpoint.api.SailPointContext;
import sailpoint.object.CertificationDefinition;
import sailpoint.object.CertificationGroup;
import sailpoint.object.Identity;
import sailpoint.object.TaskSchedule;
import sailpoint.tools.CronString;
import sailpoint.tools.GeneralException;


public class CertificationHelper {

    private static final Log log = LogFactory.getLog(CertificationHelper.class);
    
    /**
     * Encapsulates the input required for the partitioner.
     *
     */
    public static class Input {

        // sailpointcontext
        private SailPointContext context;
        
        // cert definition.
        private CertificationDefinition certificationDefinition;
        
        public Input() {
        }
        
        public SailPointContext getContext() {
        
            return context;
        }
        
        public void setContext(SailPointContext context) {
        
            this.context = context;
        }
        
        public CertificationDefinition getCertificationDefinition() {
        
            return certificationDefinition;
        }
        
        public void setCertificationDefinition(CertificationDefinition certificationDefinition) {
        
            this.certificationDefinition = certificationDefinition;
        }
    }
    
    // encapsulates the input
    protected Input input;

    public CertificationHelper(Input input) {
        
        if (log.isInfoEnabled()) {
            log.info("CertificationHelper()");
        }
        this.input = input;
    }
    
    /**
     * Creates a CertificationGroup which will contain the certifications
     * generated by this builder..
     */
    public CertificationGroup createCertificationGroup(String name, TaskSchedule taskSchedule) throws GeneralException{

        // certs scheduled before 5.1 will not have a certification group owner defined,
        // so don't attempt to create a group for those certs
        if (input.getCertificationDefinition().getCertificationOwner() == null) {
            return null;
        }
        
        Identity certOwner = input.getCertificationDefinition().getCertificationOwner(input.getContext());

        CertificationGroup certGroup = new CertificationGroup(CertificationGroup.Type.Certification);
        // Ensure unique name even if template does not include date.
        name = ObjectUtil.generateUniqueName(this.input.context, null, name, CertificationGroup.class, 0);
        certGroup.setName(name);
        certGroup.setOwner(certOwner);
        certGroup.setStatus(CertificationGroup.Status.Pending);
        
        if (null != taskSchedule) {
            //Get the frequency of the first cron expression only
            String cronString = taskSchedule.getCronExpression(0);
            if (cronString != null) {
                CronString cs = new CronString(cronString);
                certGroup.setAttribute(CertificationGroup.SCHEDULE_FREQUENCY, cs.getFrequency());
            }
        }

        certGroup.setDefinition(input.getCertificationDefinition());
        certGroup.setAssignedScope(input.getCertificationDefinition().getAssignedScope());

        return certGroup;
    }

}
