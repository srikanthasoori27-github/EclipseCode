/* (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. */
/**
 * The representation of a change in permissions held by an Identity.
 * These are generated by the Certificationer & Differencer and stored
 * in the CertificationIdentity for display in the certification report.
 *
 * Author: Jeff
 * 
 * Most attribute differences are represented with a list of Difference
 * objects, but Permissions are a special because they have substructure
 * and there can be many of them.  These characteristics make them
 * difficult to display cleanly in a simple old/new attribute value table.
 * 
 * These are allowed in the CertificationArchive so we have to be careful
 * with object references.  In theory we could regenerate them if the
 * IdentitySnapshots still exist, but they don't take up that much space.
 *
 */

package sailpoint.object;

import sailpoint.tools.xml.AbstractXmlObject;
import sailpoint.tools.xml.XMLClass;
import sailpoint.tools.xml.XMLProperty;

/**
 * The representation of a change in permissions held by an Identity.
 * These are generated by the Certificationer & Differencer and stored
 * in the CertificationIdentity for display in the certification report.
 */
@XMLClass
public class PermissionDifference extends AbstractXmlObject
{

    //////////////////////////////////////////////////////////////////////
    //
    // Fields
    //
    //////////////////////////////////////////////////////////////////////

    /**
     * The name of the Application on which this permission is held.
     */
    String _application;

    /**
     * The name of the application-specific target object.
     */
    String _target;

    /**
     * The right held on the target.
     * Note that unlike the Permission model, this is intended to
     * be a single right name, and there will be multiple 
     * PermissionDifference objects generated for each right.
     * This is not enforced and the option is open to 
     * assign a csv if that makes sense.
     */
    String _rights;

    /**
     * When true, indicates that the right(s) named in the _rights
     * field were removed from the identity. When false indicates
     * that the rights were added.
     */
    boolean _removed;

    //////////////////////////////////////////////////////////////////////
    //
    // Constructors
    //
    //////////////////////////////////////////////////////////////////////

    public PermissionDifference() {
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Properties
    //
    //////////////////////////////////////////////////////////////////////

    /**
     * The name of the Application on which this permission is held.
     */
    @XMLProperty
    public String getApplication() {
        return _application;
    }

    public void setApplication(String s) {
        _application = s;
    }

    /**
     * The name of the application-specific target object.
     */
    @XMLProperty
    public String getTarget() {
        return _target;
    }

    public void setTarget(String s) {
        _target = s;
    }

    /**
     * The right held on the target.
     * Note that unlike the Permission model, this is intended to
     * be a single right name, and there will be multiple 
     * PermissionDifference objects generated for each right.
     */
    @XMLProperty
    public String getRights() {
        return _rights;
    }

    public void setRights(String s) {
        _rights = s;
    }

    /**
     * When true, indicates that the right(s) named in the <code>rights</code>
     * property were removed from the identity. When false indicates
     * that the rights were added.
     */
    @XMLProperty
    public boolean isRemoved() {
        return _removed;
    }

    public void setRemoved(boolean b) {
        _removed = b;
    }

}
