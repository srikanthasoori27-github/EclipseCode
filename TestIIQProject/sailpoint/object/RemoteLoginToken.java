/* (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. */

/**
 * RemoteLoginToken
 * 
 * This class is used for integrations that want to allow temporary
 * login credentials into IIQ. This information will be stored for
 * a limited period of time and can allow a user to access iiq
 * if iiq is configured to accept these tokens.
 * 
 * Typical usage pattern would be to have a web service
 * call into IIQ remotely as an administrator and create
 * a RemoteLoginToken for another user.  The token Id
 * would then be referenced in the user login to provide
 * a pseudo-sso mechanism.
 * 
 * The id field generated by hibernate becomes the 
 * token id. The name  from SailPoint object contains
 * the identity that will use the token to login.
 * 
 * @author <a href="dan.smith@sailpoint.com">Dan Smth</a>
 *
 */

package sailpoint.object;

import java.util.Date;

import sailpoint.tools.xml.XMLClass;

@XMLClass
public class RemoteLoginToken extends SailPointObject implements Cloneable {
    private static final long serialVersionUID = 6723351324315532044L;

    /** 
     * The date and time the login token expires.
     */
    Date _expiration;

    /**
     * The Administrator that created the RemoteLogin.
     */
    String _createdBy;

    /**
     * The remote host that requested the token.
     * 
     */
    String _remoteHost;

    public RemoteLoginToken() {
        _createdBy = null;
        _expiration = null;
        _remoteHost = null;
    }

    public RemoteLoginToken(String iiqAdmin, Date expiration, String userName, String remoteHost) {
        _createdBy = iiqAdmin;
        // store the identity name in the name field
        setName(userName);
        _expiration = expiration;
        _remoteHost = remoteHost;
    }

    public String getCreator() {
        return _createdBy;
    }

    public void setCreator(String creator) {
        _createdBy = creator;
    }

    public Date getExpiration() {
        return _expiration;
    }

    public void setExpiration(Date expiration) {
        _expiration = expiration;
    }

    /**
     * Returns if the token is expired.  Will return
     * expired if the expiration is null or if the
     * current time is after the expiration.
     * 
     * @return expired true if the token has expired 
     */
    public boolean isExpired() {
        if ( ( _expiration == null ) ||  
             ( new Date().after(_expiration) ) )  {
            return true;
        } else {
            return false;
        }
    }
   
    public String getRemoteHost() {
        return _remoteHost;
    } 
    
    public void setRemoteHost(String remoteHost) {
        _remoteHost = remoteHost;
    }
    
    //////////////////////////////////////////////////////////////////////
    //
    // SailPointObject methods
    //
    //////////////////////////////////////////////////////////////////////
    
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

}
