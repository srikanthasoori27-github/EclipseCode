/* (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. */

/**
 * An object used to record information about which entitlements held by
 * the identity were used in the detection of a role.
 *
 * Author: Jeff
 *
 * This is a computation needed in several places in UI but prior to 3.2 it
 * was being regenerated by the EntitlementCorrelator every time.  Now it
 * is stored in the identity for quicker access.
 *
 * TODO: This is conceptually similar to RoleAssignment which records
 * information about manually assigned roles.  A concept we might want to 
 * carry over is "negative", an indication that this role is not supposed
 * to be detected even though it matches the profile.  Of course this would
 * have all the usual UI consequences.
 *
 * UPDATE: The IdentityEntitlement table is now used in most places to 
 * show contributing entitlements.  
 */

package sailpoint.object;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import sailpoint.tools.GeneralException;
import sailpoint.tools.Util;
import sailpoint.tools.xml.AbstractXmlObject;
import sailpoint.tools.xml.SerializationMode;
import sailpoint.tools.xml.XMLClass;
import sailpoint.tools.xml.XMLProperty;

/**
 * An object used to record information about which entitlements held by
 * the identity were used in the detection of a role. This is calculated
 * as a side effect of entitlement correlation, and not intended to 
 * be edited manually.
 */
@XMLClass
public class RoleDetection extends AbstractXmlObject
{

    //////////////////////////////////////////////////////////////////////
    // 
    // Fields
    //
    //////////////////////////////////////////////////////////////////////

    private static Log log = LogFactory.getLog(RoleDetection.class);

    /**
     * The unique id of this detection.
     */
    String _detectionId;

    /**
     * The id of the detected role.
     */
    String _roleId;
  
    /**
     * The name of the detected role.
     */
    String _roleName;

    /**
     * Date the detection was made.
     */ 
    Date _date;

    /**
     * CSV of assignmentIds for the assigned roles that use this
     * detected role. null if this is an uncoverted role detection.
     */
    String _assignmentIds;

    /**
     * Target accounts for this detection.
     */
    List<RoleTarget> _targets;

    //
    // Transient State for EntitlementCorrelator
    //

    /**
     * EntitlementCorrelator model representing all of the
     * entitlements that were used to detect this role.
     */
    EntitlementCollection _entitlementCollection;

    //////////////////////////////////////////////////////////////////////
    //
    // Constructor/Properties
    //
    //////////////////////////////////////////////////////////////////////

    public RoleDetection() {
    }

    public RoleDetection(Bundle b) {
        setRole(b);
        _date = new Date();
    }

    /**
     * This is the constructor used by the entitlement correlator.
     * It converts the EntitlementGroup model used at runtime to
     * an EntitlementSnapshot model used for long term storage.
     */
    public RoleDetection(String id, String name, EntitlementCollection col, List<EntitlementGroup> ents) {
        _roleId = id;
        _roleName = name;
        _entitlementCollection = col;
        // ugh, two levels of converesion
        setTargets(RoleTarget.fromEntitlementGroups(ents));
    }

    public void setRole(Bundle role) {
        if (role != null) {
            _roleId = role.getId();
            _roleName = role.getName();
        }
    }

    /**
     * The unique id of this detection.
     * @ignore
     * Don't include this in the XML model yet, I want to make sure
     * we need it.
     */
    public String getDetectionId() {
        return _detectionId;
    }

    public void setDetectionId(String s) {
        _detectionId = s;
    }

    /**
     * The id of the detected role.
     */
    @XMLProperty
    public String getRoleId() {
        return _roleId;
    }

    public void setRoleId(String s) {
        _roleId = s;
    }

    /**
     * The name of the detected role.
     */
    @XMLProperty
    public String getRoleName() {
        return _roleName;
    }

    public void setRoleName(String s) {
        _roleName = s;
    }

    /**
     * The date the detection was made.
     */ 
    @XMLProperty
    public Date getDate() {
        return _date;
    }

    public void setDate(Date d) {
        _date = d;
    }

    /**
     * Get the assignment id csv.   
     */
    @XMLProperty
    public String getAssignmentIds() {
        return _assignmentIds;
    }

    public void setAssignmentIds(String ids) {
        _assignmentIds = ids;
    }

    /**
     * Gets the targets for the role assignment.
     * @return The targets.
     */
    public List<RoleTarget> getTargets() {
        return _targets;
    }

    /**
     * Sets the targets for the role assignment.
     * @param targets The targets.
     */
    @XMLProperty(mode= SerializationMode.INLINE_LIST_UNQUALIFIED)
    public void setTargets(List<RoleTarget> targets) {
        _targets = targets;
    }

    //////////////////////////////////////////////////////////////////////
    //
    // EntitlementCollection
    //
    //////////////////////////////////////////////////////////////////////

    /**
     * Alternate representation still used by EntitlementCorrelator.
     */
    public void setEntitlementCollection(EntitlementCollection ec) {
        _entitlementCollection = ec;
    }

    public EntitlementCollection getEntitlementCollection() {
        return _entitlementCollection;
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Utilities
    //
    //////////////////////////////////////////////////////////////////////

    /**
     * Fetch the role object for this assignment.
     * Since unit tests are allowed to create RoleAssignments without
     * ids this needs to be done in a lot of places.
     */
    public Bundle getRoleObject(Resolver r) throws GeneralException {

        // if we have an id that takes priority, otherwise fall back to name
        Bundle role = null;
        if (_roleId != null)
            role = r.getObjectById(Bundle.class, _roleId);
        else 
            role = r.getObjectByName(Bundle.class, _roleName);

        return role;
    }

    /**
     * Get the assignment ids as a list.
     * Internally this is maintained as a csv for cleaner XML.
     */
    public List<String> getAssignmentIdList() {
        return Util.csvToList(_assignmentIds);
    }

    public void setAssignmentIds(List<String> ids) {
        String str = Util.listToCsv(ids);
        if (str != null) {
            str = str.trim();
            if (str.length() == 0)
                str = null;
        }
        _assignmentIds = str;
    }

    /**
     * Return true if this was detected in the context of 
     * a RoleAssignment.
     */
    public boolean hasAssignmentId(String id) {
        return (_assignmentIds != null && _assignmentIds.indexOf(id) >= 0);
    }

    public boolean hasAssignmentIds() {
        return (_assignmentIds != null && _assignmentIds.length() > 0);
    }

    /**
     * Add an assignment id to the list.
     */
    public void addAssignmentId(String id) {
        if (id != null && !hasAssignmentId(id)) {
            List<String> ids = getAssignmentIdList();
            ids.add(id);
            setAssignmentIds(ids);
        }
    }

    public void removeAssignmentId(String id) {
        if (id != null && hasAssignmentId(id)) {
            List<String> ids = getAssignmentIdList();
            ids.remove(id);
            setAssignmentIds(ids);
        }
    }

    /**
     * Return true if this matches a role reference.
     * Usual unit test complication to deal with missing database ids.
     */
    public boolean isMatchingRole(String id, String name) {
        return 
            ((_roleId != null && _roleId.equals(id)) ||
             ((_roleId == null || id == null) &&
              (_roleName != null && _roleName.equals(name))));
    }

    /**
     * Return true if one role detection is logically equal to another.
     * First they must reference the same role, then they must have the
     * same RoleTargets.
     */
    public boolean isMatch(RoleDetection other) {

        boolean match = false;
        if (isMatchingRole(other.getRoleId(), other.getRoleName())) {
            match = RoleTarget.isEqual(_targets, other.getTargets());
        }
        return match;
    }

    /**
     * Return true if the RoleTargets in this detection are all
     * included in another detection list. Used by EntitlementCorrelator
     * when reconciling incremental detections. The list can include
     * more targets than needed.
     */
    public boolean hasCompatibleTargets(List<RoleTarget> other) {

        return RoleTarget.isCompatible(_targets, other);
    }

    /**
     * Gets the first assignment id in the assignment id list if one exists.
     * @return The first assignment id or null.
     */
    public String getFirstAssignmentId() {
        List<String> assignmentIds = getAssignmentIdList();
        if (Util.isEmpty(assignmentIds)) {
            return null;
        }

        return assignmentIds.get(0);
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Deprecated
    //
    // In 6.3 we changed RoleAssignment and RoleDetection to have the
    // properties roleId and roleName instead of just id and name to 
    // avoid confusion with assignmentId and detectionId.
    //
    //////////////////////////////////////////////////////////////////////

    /**
     * Pre 6.3 contributing entitlements were stored as a List of
     * IdentityItem objects. Now these are organized into a list
     * of RoleTargets containing AccountItems. Auto upgrade when parsed.
     * @deprecated use {@link #setTargets(java.util.List)}
     * @see RoleTarget
     */ 
    @Deprecated
    @XMLProperty(mode=SerializationMode.INLINE_LIST_UNQUALIFIED)
    public void setItems(List<IdentityItem> items) {

        _targets = null;
        if (Util.size(items) > 0) {
            _targets = new ArrayList<RoleTarget>();
            // consoloddate all items into one RoleTarget for each app/identity
            Map<String,RoleTarget> tmap = new HashMap<String,RoleTarget>();
            for (IdentityItem item : items) {
                // blow off instances, never did support them for provisioning
                String appname = item.getApplication();
                String identity = item.getNativeIdentity();
                String key = appname + ":" + identity;
                RoleTarget target = tmap.get(key);
                if (target == null) {
                    target = new RoleTarget();
                    target.setApplicationName(appname);
                    target.setNativeIdentity(identity);
                    tmap.put(key, target);
                    _targets.add(target);
                }
                target.addItem(new AccountItem(item));
            }
        }
    }

    /**
     * @deprecated use {@link #getTargets()}
     * @see RoleTarget
     */
    @Deprecated
    public List<IdentityItem> getItems() {
        return null;
    }

    /**
     * @deprecated use {@link #setRoleId(String)}
     */
    @Deprecated
    @XMLProperty(xmlname="id")
    public void setXmlId(String s) {
        setRoleId(s);;
    }

    /**
     * @deprecated use {@link #getRoleId()}
     */
    @Deprecated
    public String getXmlId() {
        return null;
    }

    /**
     * @deprecated use {@link #setRoleName(String)}
     */
    @Deprecated
    @XMLProperty(xmlname="name")
    public void setXmlName(String s) {
        setRoleName(s);
    }

    /**
     * @deprecated use {@link #getRoleName()}
     */
    @Deprecated
    public String getXmlName() {
        return null;
    }

    /**
     * @deprecated use {@link #getRoleId()} instead.
     */
    @Deprecated
    public String getId() {
        return getRoleId();
    }

    /**
     * @deprecated use {@link #setRoleId(String)}
     */
    @Deprecated
    public void setId(String s) {
        setRoleId(s);
    }

    /**
     * @deprecated use {@link #getRoleName()}
     */
    @Deprecated
    public String getName() {
        return getRoleName();
    }

    /**
     * @deprecated use {@link #setRoleName(String)}
     */
    @Deprecated
    public void setName(String s) {
        setRoleName(s);
    }

}

