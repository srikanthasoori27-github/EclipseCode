/* (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. */

/**
 * An object derived from a WorkflowCase that contains a summary
 * of the workflow progress structured so that it can be rendered
 * using JSF.  One of these will be left in the workflow TaskResult by 
 * Workflower as it advances.
 *
 * Author: Jeff
 *
 * At first we're just trying to show the approvals that have
 * been and are yet to be performed.  Eventually we could try
 * to model the "path" through the process and show a flow chart.
 * 
 */

package sailpoint.object;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import sailpoint.tools.Message;
import sailpoint.tools.xml.SerializationMode;
import sailpoint.tools.xml.XMLClass;
import sailpoint.tools.xml.XMLProperty;
import sailpoint.tools.xml.AbstractXmlObject;

@XMLClass
public class WorkflowSummary extends AbstractXmlObject {

    //////////////////////////////////////////////////////////////////////
    //
    // ApprovalSummary
    //  
    //////////////////////////////////////////////////////////////////////

    /**
     * Helper class to represent the status of a single approval.
     */
    @XMLClass
    public static class ApprovalSummary {

        /**
         * The database id of the work item opened for this interaction.
         * The Workitem may have been deleted, but the id is still used to 
         * correlate between this object and an Approval object in the
         * workflow case so the status can be updated.
         */
        String _workItemId;
        
        /**
         * The name of the identity that completed the work item
         */
        String _completer;
        
        /**
         * The signOff on the WorkItem if a signOff was completed
         */
        SignOffHistory _signOff;
        
        // 
        // Various things copied from the WorkItem since it may 
        // not exist any more.
        //

        String _ownerId;
        String _owner;
        String _request;
        WorkItem.Type _workItemType;
        WorkItem.State _state;
        ApprovalSet _approvalSet;

        List<Comment> _comments;
        
        // Sigh, these have to have XML names that can be filtered
        // from tests results.  Sadly "started" is used for
        // something we don't want to filter.

        Date _startDate;
        Date _endDate;

        public ApprovalSummary() {
        }

        /**
         * This form is used when a node has a known owner name
         * (or csv of owner names).
         */
        public ApprovalSummary(Workflow.Approval app) {
            assimilate(app);
        }

        /**
         * This form used only when trying to determine pending 
         * approvals from a non-normalized Approval and a list of
         * owner names generated by a rule.
         */
        public ApprovalSummary(Workflow.Approval app, String owner) {
            _owner = owner;
            assimilate(app);
        }

        @XMLProperty
        public String getWorkItemId() {
            return _workItemId;
        }

        public void setWorkItemId(String s) {
            _workItemId = s;
        }
        
        @XMLProperty
        public String getCompleter() {
            return _completer;
        }

        public void setCompleter(String _completer) {
            this._completer = _completer;
        }

        @XMLProperty
        public SignOffHistory getSignOff() {
            return _signOff;
        }

        public void setSignOff(SignOffHistory signOff) {
            this._signOff = signOff;
        }

        @XMLProperty
        public String getOwnerId() {
            return _ownerId;
        }

        public void setOwnerId(String s) {
            _ownerId = s;
        }
        
        @XMLProperty
        public String getOwner() {
            return _owner;
        }

        public void setOwner(String s) {
            _owner = s;
        }

        @XMLProperty
        public String getRequest() {
            return _request;
        }

        public void setRequest(String s) {
            _request = s;
        }

        @XMLProperty
        public Date getStartDate() {
            return _startDate;
        }

        public void setStartDate(Date d) {
            _startDate = d;
        }

        @XMLProperty
        public Date getEndDate() {
            return _endDate;
        }

        public void setEndDate(Date d) {
            _endDate = d;
        }

        @XMLProperty
        public WorkItem.State getState() {
            return _state;
        }

        public void setState(WorkItem.State s) {
            _state = s;
        }

        @XMLProperty
        public WorkItem.Type getWorkItemType() {
            return _workItemType;
        }

        public void setWorkItemType(WorkItem.Type type) {
            _workItemType = type;
        }

        @XMLProperty(mode=SerializationMode.UNQUALIFIED)
        public ApprovalSet getApprovalSet() {
            return _approvalSet;
        }

        public void setApprovalSet(ApprovalSet set) {
            _approvalSet = set;
        }

        @XMLProperty(mode = SerializationMode.LIST, xmlname = "ApprovalSummaryComments")
        public List<Comment> getComments() {
        	if (_comments != null) {
        	    return _comments;
        	} else {
        	    List<Comment> itemComments = new ArrayList<Comment>();
        	    
        		 // check items for comments
                if (_approvalSet != null) {
                	List<ApprovalItem> approvalItems = _approvalSet.getItems();
                	for (ApprovalItem item : approvalItems) {
                		if (item.getComments() != null) {
                			itemComments.addAll(item.getComments());
                		}
                	}
                }

                return itemComments.isEmpty() ? null : itemComments;
        	}
        }
        
        public void setComments(List<Comment> comments) {
            _comments = comments;
        }
        
        public void addComment(Comment comments) {
            if (_comments == null)
                _comments = new ArrayList<Comment>();

            if (comments != null)    
                _comments.add(comments);
        }
        
        /**
         * Assimilate state from a running Workflow.
         * This is intended to be called only for leaf approvals after 5.0.
         * If this is used again with parent approvals, there will 
         * need to be a smarter plan about deriving a "phase" or something to 
         * stick into the request to track location in the 
         * hierarchy.
         */
        public void assimilate(Workflow.Approval app) {
            _workItemId = app.getWorkItemId();
            _owner = app.getOwner();
            _request = app.getWorkItemDescription();
            _state = app.getState();
            _workItemType = app.getWorkItemType();
            _startDate = app.getStartDate();
            _endDate = app.getEndDate();
            _approvalSet = app.getApprovalSet();
        }

        /**
         * Return true if the this is a simple item whose
         * completion state should be rendered as "Approved"
         * rather than "Finished". There is no WorkItem.State
         * meaning Approved, it is either Finished or Rejected.
         * With the newer work items for granular approvals and 
         * manual actions "Finished" can mean several things.
         */  
        public boolean isApproved() {

            return (_state == WorkItem.State.Finished && 
                    _approvalSet == null &&
                    _workItemType == WorkItem.Type.Approval);
        }

        /**
         * JSF Helper - return the message key of the work item type.
         */
        public String getTypeKey() {
            String key = null;
            if (_workItemType != null)
                key = _workItemType.getMessageKey();
            return key;
        }

        /**
         * JSF Helper - return the message key of the work item state.
         * This one is a little more complicated so the
         * "Approved" status can be inserted.
         */
        public String getStateKey() {
            String key = null;
            if (isApproved())
                key = "work_item_state_approved";
            else if (_state != null)
                key = _state.getMessageKey();
            else
                key = "work_item_state_open";
            return key;
        }

    }

    //////////////////////////////////////////////////////////////////////
    //
    // Fields
    //  
    //////////////////////////////////////////////////////////////////////

    /**
     * The top-level "shopping cart" that was passed into this workflow.
     * This will be non-null for newer workflows like those launched by
     * LCM. If found you can present a table of shopping cart contents.
     * Each item in the set can be partitioned and sent to multple approvers,
     * Each ApprovalSummary can in turn contain its own ApprovalSet
     * with a subset of this approval set.
     *
     * @deprecated This is now contained on the IdentityRequest
     */
    @Deprecated
    ApprovalSet _approvalSet;

    /**
     * List of all the errors that were encountered.
     * Probably will need more context here.
     * @ignore
     * NOTE: This is not currently set, we're readily copying the
     * case's error list to the TaskResult since we already have
     * a way to render the TaskResult error list.
     */
    List<Message> _errors;

    /**
     * The current step in the workflow process.
     * Could also include these simpler things as top-level
     * attributes in the TaskResult but it is easy enough to get them here.
     * If the workflow has advanced to completion this will be "Completed"
     * or some similar term.
     * 
     * @ignore
     * TODO: May want to leave this as the last actual step in case
     * we had to terminate early due to errors?
     */
    String _step;

    /**
     * List of all the leaf approvals that have been started.
     */
    List<ApprovalSummary> _interactions;

    //////////////////////////////////////////////////////////////////////
    //
    // Properties
    //  
    //////////////////////////////////////////////////////////////////////

    public WorkflowSummary() {
    }

    @XMLProperty(mode=SerializationMode.UNQUALIFIED)
    public ApprovalSet getApprovalSet() {
        return _approvalSet;
    }
        
    public void setApprovalSet(ApprovalSet set) {
        _approvalSet = set;
    }

    @XMLProperty
    public String getStep() {
        return _step;
    }
        
    public void setStep(String name) {
        _step = name;
    }

    @XMLProperty(mode=SerializationMode.LIST,xmlname="Interactions")
    public void setInteractions(List<ApprovalSummary> apps) {
        _interactions = apps;
    }

    public List<ApprovalSummary> getInteractions() {
        return _interactions;
    }

    // convenient for JSF
    public int getInteractionCount() {
        return (_interactions != null) ? _interactions.size() : 0;
    }

    // note that we have an error list in some other objects
    // so the signatures and SerializationModes must match
    @XMLProperty(mode=SerializationMode.LIST)
    public List<Message> getErrors() {
        return _errors;
    }

    public void setErrors(List<Message> errors) {
        _errors = errors;
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Upgrade
    //  
    //////////////////////////////////////////////////////////////////////

    /**
     * Support the "approval" property in the XML model so it does not
     * die parsing old task results.
     * @deprecated 
     */
    @Deprecated
    @XMLProperty
    public String getApproval() {
        return null;
    }

    /**
     * @deprecated 
     */
    @Deprecated
    public void setApproval(String phase) {
    }

    /**
     * Parse the old bifurcated approval and rejected lists into the
     * new interactions list.
     * @deprecated use {@link #addInteractions(java.util.List)}
     */
    @Deprecated
    @XMLProperty(mode=SerializationMode.LIST,xmlname="ApprovalsReceived")
    public void setApprovals(List<ApprovalSummary> apps) {
        addInteractions(apps);
    }

    /**
     * @deprecated use {@link #getInteractions()} 
     */
    @Deprecated
    public List<ApprovalSummary> getApprovals() {
        return null;
    }

    /**
     * Parse the old bifurcated approval and rejected lists into the
     * new interactions list.
     * @deprecated use {@link #addInteractions(java.util.List)}
     */
    @Deprecated
    @XMLProperty(mode=SerializationMode.LIST,xmlname="RejectionsReceived")
    public void setRejections(List<ApprovalSummary> apps) {
        addInteractions(apps);
    }
    
    /**
     * @deprecated use {@link #getInteractions()} 
     */
    @Deprecated
    public List<ApprovalSummary> getRejections() {
        return null;
    }

    /**
     * Parse the old pending list and toss it. These are no longer display.
     * @deprecated 
     */
    @Deprecated
    @XMLProperty(mode=SerializationMode.LIST,xmlname="ApprovalsPending")
    public void setPending(List<ApprovalSummary> apps) {
    }

    /**
     * @deprecated 
     */
    @Deprecated
    public List<ApprovalSummary> getPending() {
        return null;
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Utilities
    //  
    //////////////////////////////////////////////////////////////////////

    public void addInteraction(Workflow.Approval app) {
        if (app != null) {
            ApprovalSummary sum = new ApprovalSummary(app);
            addInteraction(sum);
        }
    }

    public void addInteraction(ApprovalSummary sum) {
        if (sum != null) {
            if (_interactions == null)
                _interactions = new ArrayList<ApprovalSummary>();
            _interactions.add(sum);
        }
    }

    private void addInteractions(List<ApprovalSummary> sums) {
        if (sums != null) {
            for (ApprovalSummary sum : sums)
                addInteraction(sum);
        }
    }

    public void internInteraction(Workflow.Approval app) {
        if (app != null) {
            ApprovalSummary sum = new ApprovalSummary(app);
            addInteraction(sum);
        }
    }

    /**
     * Replace or append an approval summary. Maintain order
     * and always put new things at the end.
     */
    public void replaceInteraction(ApprovalSummary neu) {

        String itemId = neu.getWorkItemId();
        if (itemId != null) {
            boolean replaced = false;
            if (_interactions != null) {
                for (int i = 0 ; i < _interactions.size() ; i++) {
                    ApprovalSummary sum = _interactions.get(i);
                    if (itemId.equals(sum.getWorkItemId())) {
                        _interactions.set(i, neu);
                        replaced = true;
                        break;
                    }
                }
            }
            if (!replaced)
                addInteraction(neu);
        }
    }



}
