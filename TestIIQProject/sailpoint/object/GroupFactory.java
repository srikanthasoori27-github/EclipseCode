/* (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. */

/**
 * A class defining an identity group type.
 *
 * Author: Jeff
 * 
 * Group types are not themselves groups of identities, they
 * describe how to *materialize* the groups of identities.  For example
 * a common group type will be "Department" which means that we first
 * must determine the set of all departments, then the set of identities
 * in each department, then an aggregate index for each department.
 * Other examples of group types include: Organization, Location,
 * Business Unit, and Manager.
 *
 * Group types are defined by selecting an identity attribute
 * whose values will be the names of the materialized groups.
 * The groups are materialized as instances of the GroupDefinition class.
 *
 * Note that you may also have GroupDefinition objects that are not
 * affiliated with a GroupFactory.   These are "singleton" groups
 * also known as "Interesting Populations of People" commonly
 * abbreviated to IPOPs.
 *
 * For consistency we could define a GroupFactory for every iPOP,
 * or have a single shared GroupFactory(name=Singleton) object
 * for all iPOPS, just to that you can depend on a non-null
 * GroupDefinition->GroupFactory relationship.  
 * 
 */

package sailpoint.object;

import java.util.Date;

import sailpoint.tools.GeneralException;
import sailpoint.tools.xml.SerializationMode;
import sailpoint.tools.xml.XMLClass;
import sailpoint.tools.xml.XMLProperty;

/**
 * A class defining a method for generating <GroupDefinitions>
 *
 * In the ui these are displayed as "identity group types".
 * 
 * Group types are defined by selecting an identity attribute
 * whose values will be the names of the materialized groups.
 * The groups are materialized as instances of the <code>GroupDefinition</code>
 * class.
 *
 * Note that you might also have GroupDefinition objects that are not
 * affiliated with a GroupFactory. These are "singleton" groups
 * also known as "Interesting Populations of People" commonly
 * abbreviated to IPOPs.
 */
@XMLClass
public class GroupFactory extends SailPointObject implements Cloneable
{

    //////////////////////////////////////////////////////////////////////
    //
    // Fields
    //
    //////////////////////////////////////////////////////////////////////

    /**
     * The name of the identity attribute used to determine the group names.  
     * This can be any of the built-in or extended identity attributes.
     */
    String _factoryAttribute;

    /**
     * When true the group type is active and will be used when
     * refreshing group scores. A set of pre-defined
     * group types is distributed for some common cases. The customer can then enable
     * the types they need rather than configure group types from scratch.
     */
    boolean _enabled;

    /**
     * The date this group type was last refreshed.
     */
    Date _lastRefresh;

    /**
     * Rule used to determine the group owners for the groups
     * generated by this factory.
     */
    Rule _groupOwnerRule;
    
    //////////////////////////////////////////////////////////////////////
    //
    // Constructor
    //
    //////////////////////////////////////////////////////////////////////
    
    public GroupFactory() {
    }

    public void visit(Visitor v) throws GeneralException {
        v.visitGroupFactory(this);
    }

    //////////////////////////////////////////////////////////////////////
    //
    // Properties
    //
    //////////////////////////////////////////////////////////////////////


    @XMLProperty
    public void setFactoryAttribute(String s) {
        _factoryAttribute = s;
    }

    /**
     * The name of the identity attribute used to determine the group names.  
     * This can be any of the built-in or extended identity attributes.
     */
    public String getFactoryAttribute() {
        return _factoryAttribute;
    }

    @XMLProperty
    public void setEnabled(boolean b) {
        _enabled = b;
    }

    /**
     * When true the group type is active and will be used when
     * refreshing group scores. A set of pre-defined
     * group types is distributed for some common cases. The customer can then enable
     * the types they need rather than configure group types from scratch.
     */
    public boolean isEnabled() {
        return _enabled;
    }

    @XMLProperty
    public void setLastRefresh(Date d) {
        _lastRefresh = d;
    }

    public Date getLastRefresh() {
        return _lastRefresh;
    }

    /**
     * Rule used to assign group owners.
     */
    @XMLProperty(mode=SerializationMode.REFERENCE)
    public Rule getGroupOwnerRule() {
        return _groupOwnerRule;
    }
    
    public void setGroupOwnerRule(Rule rule) {
        _groupOwnerRule = rule;
    }
    
    //////////////////////////////////////////////////////////////////////
    //
    // Utilities
    //
    //////////////////////////////////////////////////////////////////////
    

}
