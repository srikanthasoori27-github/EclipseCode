/* (c) Copyright 2013 SailPoint Technologies, Inc., All Rights Reserved. */

/**
 * The results of an impact or "what if" analysis.
 *
 *
 *Currently the things we analyse are changes in Policy rules
 *This is to get statistics of possible violations due to change.
 *
 *Currently one of these is generated by the PolicyImpactAnalysisCalculator and
 *left serialized in the TaskResult.
 *
 */

package sailpoint.object;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonIgnore;

import sailpoint.tools.xml.AbstractXmlObject;
import sailpoint.tools.xml.SerializationMode;
import sailpoint.tools.xml.XMLClass;
import sailpoint.tools.xml.XMLProperty;

/**
 * Used to hold the results of an impact analysis on a Policy.
 * These will be stored inside a <code>TaskResult</code>.
 * 
 */
@XMLClass
public class PolicyImpactAnalysis extends AbstractXmlObject {

    //////////////////////////////////////////////////////////////////////
    //
    // Fields
    //  
    //////////////////////////////////////////////////////////////////////
    /**
     * List containing violation information per rule in a policy.
     */
    List<ViolationResult> violationResults;

    /**
     * This is an indicator to know if there are any active rules 
     * for which impact analysis result will be populated
     */
    boolean noActiveRules;

    /**
     * Name of the policy for which impact analysis is being executed.
     */
    String policyName;
    
    /**
     * Type of the policy for which impact analysis is being executed.
     */
    String policyType;

    public PolicyImpactAnalysis(){
        violationResults = new ArrayList<ViolationResult>();
    }

    public List<ViolationResult> getViolationResults(){
        return violationResults;
    }

    @XMLProperty(mode=SerializationMode.LIST)
    public void setViolationResults(List<ViolationResult> list){
        violationResults = list;
    }

    public void addViolationResultToList(String rule, int violationCount, int identityCount){
        ViolationResult data = new ViolationResult();
        data.setRuleName(rule);
        data.setViolationCount(violationCount);
        data.setIdentityCount(identityCount);
        violationResults.add(data);
    }

    @XMLProperty
    public void setNoActiveRules(boolean state){
        noActiveRules = state;
    }

    @JsonIgnore
    public boolean getNoActiveRules(){
        return noActiveRules;
    }

    @XMLProperty
    public void setPolicyName(String name){
        policyName = name;
    }

    @JsonIgnore
    public String getPolicyName(){
        return policyName;
    }

    @XMLProperty
    public void setPolicyType(String type){
        policyType = type;
    }
    
    public String getPolicyType(){
        return policyType;
    }
    /**
    * Internal object to hold violation result statistics.
    */
    @XMLClass
    public static class ViolationResult {
        /**
         * Name of the rule being checked for violations.
         */
        String _ruleName;

        /**
         * Number of violations for current rule.
         */
        int _violationCount;

        /**
         * Number of identities with violations.
         */
        int _identityCount;

        public ViolationResult() {
         _ruleName = "";
         _violationCount = 0;
         _identityCount = 0;
        }

        @XMLProperty
        public void setRuleName(String rule){
            _ruleName = rule;
        }

        public String getRuleName(){
            return _ruleName;
        } 

        @XMLProperty
        public void setViolationCount(int count){
            _violationCount = count;
        }

        public int getViolationCount(){
            return _violationCount;
        }

        @XMLProperty
        public void setIdentityCount(int count){
            _identityCount = count;
        }

        public int getIdentityCount(){
            return _identityCount;
        }
    }
}