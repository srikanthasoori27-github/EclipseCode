<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<!--
  ~ (c) Copyright 2020 SailPoint Technologies, Inc., All Rights Reserved.
  -->

<sailpoint>

<Rule name="Leaver Reassignment Sample - Mgr or Admin"  language="beanshell" type="LeaverReassignment" >
  <Description>
    This example is for Leaver reassignment.  This simple example returns the manager's name
    if identityname has a amanger, otherwise returns 'spadmin'.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identityName">
        <Description>
          The name of the identity whose artifacts are being reassigned during Leaver.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="reassignee">
        <Description>
          The name of the identity to whom the artifacts of identityName should be reassigned
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[

    import sailpoint.object.Identity;

    String reassignee = null;
    Identity identity = context.getObjectByName(Identity.class, identityName);
    if (identity != null) {
      Identity mgr = identity.getManager();
      if (mgr != null) {
        reassignee = mgr.getName();
      }
      else {
        reassignee = "spadmin";
      }
      context.decache(identity);
    }
    return reassignee;
    ]]>
  </Source>
</Rule> 
<Rule name="Leaver Sample - empty Account Requests"  language="beanshell" type="LeaverAccountRequests" >
  <Description>
    This example is for Leaver application-specific account requests rule.
  </Description>
  <Signature>
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identityName">
        <Description>
          The name of the identity who is leaving.
        </Description>
      </Argument>
      <Argument name="appName">
        <Description>
          The name of the application on which the identity (with name = identityName) has an account
        </Description>
      </Argument>
      <Argument name="nativeId">
        <Description>
          The native id for the account that the identity (with name = identityName) has on the application
          (with name = appName)
        </Description>
      </Argument>
      <Argument name="requestType">
        <Description>
          The type of request being processed.  This is currently always set to "leaver".
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="accountRequests">
        <Description>
          The list of AccountRequest objects which should be executed to allow the given identity (identityName) to leave the
          given account (nativeId) on the given application (appName)
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[

    import java.util.List;
    import java.util.ArrayList;
    import sailpoint.object.ProvisioningPlan.AccountRequest;

    // this is a stub example that returns an empty list of AccountRequest
    List accountRequests = new ArrayList();

    // Normally, you construct AccountRequest objects, and possibly add AttributeRequest objects
    // into the AccountRequest objects

    return accountRequests;
    ]]>
  </Source>
</Rule>

<!--
  -  A RequestObjectSelector rule that generates a Filter to only return roles that are not selected as RapidSetup Birthright roles.
  -->
<Rule language="beanshell" name="Roles that are not RapidSetup Birthright Roles" type="RequestObjectSelector">
  <Description>This rule returns a Filter that restricts roles with a type that is not selected as RapidSetup Birthright role types.</Description>
  <Signature returnType="sailpoint.object.Filter">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="requestor" type="sailpoint.object.Identity">
        <Description>
          Identity that is making the Life Cycle Manager request.
        </Description>
      </Argument>
      <Argument name="requestee" type="sailpoint.object.Identity">
        <Description>
          Identity on whose behalf the Life Cycle Manager request is being made. In the case of bulk requests,
          this argument will be set to null when determining the roles that are visible to the requestor.
          It will be provided once a selection has been made in order to determine whether or not the given requestee
          should have access to the selected role.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="filter">
        <Description>
          A Filter object that will be used to search for accessible Roles.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>
    <![CDATA[
     import sailpoint.object.Filter;
     import sailpoint.object.Identity;
     import sailpoint.web.modeler.RoleConfig;
     RoleConfig rc = new RoleConfig();
     return Filter.in("type", rc.getNonBirthrightRapidSetupRoleTypes());
   ]]>
  </Source>
</Rule>


<Rule language="beanshell" name="Population Specific Leaver Rule" type="LeaverAccountRequests">
      <Source>
       <![CDATA[
       /**
        Example rule for leaver configuration.  The following parameters are passed in:
        context - a SailpointContext
        identityName - the name of the identity that is leaving
        appName - the name of the application for which the config is being requeested
        nativeId - the native id of the account
        requestType - terminate or leaver
        mode - immediate or later
        leaverPlanBuilder - the leaver plan builder
        log - log object, used to write log messages
        */
      import java.util.Map;
      import java.util.List;
      import java.util.HashMap;
      import sailpoint.object.ProvisioningPlan;
      import sailpoint.tools.Util;
      import sailpoint.rapidsetup.plan.*;

      Map additionalArgs = new HashMap();
      additionalArgs.put("requestType", requestType);

      // Create a composite configuration object, and pass in the default configuration provider (forEveryone)
      LeaverAppConfigProvider provider = new CompositeConfigProvider(
          LeaverConfigBuilder.forEveryone().
		          setRemoveEntitlements(appName, LeaverAppConfigProvider.OPT_MODE_LATER).
              setEntitlementDelay(appName, 5).
              build(context)
      );

      // Create the population specific configuration provider (forPopulation) and
      // add it to the composite configuration object
      provider.add(
          LeaverConfigBuilder.forPopulation(context, "GoofyGoobers").
              setRemoveEntitlements(appName, LeaverAppConfigProvider.OPT_MODE_LATER).
              setEntitlementDelay(appName, 3).
              build(context)
      );

      // this returns the individual requests used in the provisioning plans using the passed in configuration objects
      ConfiguredLeaverRequest configuredRequest = BasePlanBuilder.leaverPlan(context, identityName, additionalArgs, provider, leaverPlanBuilder.isTerminateIdentity()).
              getAppRequests(context, identityName, appName, mode, nativeId);

      // insert custom processing of leaver requests here
      // this could be for example to add more complex entitlement exclusuion rules.  Just replace
      // the print statements below, with actual processing of the accountRequests.
      // if no additional processing is required, just return configuredRequest
      List accountRequests = configuredRequest.getAccountRequests();

      // walk through the plan account requests and alter the details.
      for(ProvisioningPlan.AccountRequest accountRequest : Util.safeIterable(accountRequests)) {
          print("Account Op: " + accountRequest.getOperation() + "   Application Name: " + accountRequest.getApplicationName());
          print("Attribute request info ...");
          for(ProvisioningPlan.AttributeRequest attributeRequest : Util.safeIterable(accountRequest.getAttributeRequests())) {
              print("  Attribute Op: " + attributeRequest.getOp() + "   Attribute Name: " +
                      attributeRequest.getName() + "   Attribute Value: " + attributeRequest.getValue());
          }
      }

      return configuredRequest;
    ]]>
  </Source>
</Rule>

<Rule language="beanshell" name="Post Lifecycle Rule" type="PostLifecycle" >
  <Source>
  <![CDATA[
    /*
     * Example of a PostLifecycle Rule.  
     * Params passed into the rule are:
     *    identityName - String - name of the identity that was processed
     *    requestType - String - type of the request (for example, joiner, mover or leaver)
     *    project - ProvisioningProject - ProvisioningProject for for this request (may be null 
     *              if no provisioning plans were run immediately)
     */
    print("This is a test Post Joiner Rule");
    print("IdentityName:  " + identityName);
    print("RequestType:  " + requestType);
    print("ProvisioningProject Identity:  " + ((project == null) ? "<project is null>" : project.getIdentity()));
  ]]>
  </Source>
</Rule>

<Rule language="beanshell" name="Post Lifecycle Rule - Delete Container" type="PostLifecycle" >
  <Source>
    <![CDATA[
    import sailpoint.rapidsetup.plan.BasePlanBuilder;
    import sailpoint.api.Workflower;
    import sailpoint.api.WorkflowSession;
    import sailpoint.object.Configuration;
    import sailpoint.object.Attributes;
    import sailpoint.object.Filter;
    import sailpoint.object.Identity;
    import sailpoint.object.ManagedAttribute;
    import sailpoint.object.ProvisioningPlan;
    import sailpoint.object.ProvisioningPlan.AttributeRequest;
    import sailpoint.object.Source;
    import sailpoint.object.WorkflowLaunch;

    /*
     * This is an example of how to remove a PAM container from a post lifecycle rule.
     * Params passed into the rule are:
     *    identityName - String - name of the identity that was processed
     *    requestType - String - type of the request (for example, joiner, mover or leaver)
     *    project - ProvisioningProject - ProvisioningProject for for this request (may be null
     *              if no provisioning plans were run immediately)
     */

    // the next two lines set the application name, and the name of the container to remove.
    // these would likely be stored in the identity in extended attributes.
    String appName = "PAMApplicationName";
    String containerName = "ContainerToRemove";

    // This is just an example, so we will use displayName to lookup the
    // container to delete.  In production, be sure to use something
    // that uniquely identifies the container.
    Filter filter = Filter.and(Filter.eq("type", "Container"),
    Filter.eq("displayName", containerName));

    ManagedAttribute entitlement = context.getUniqueObject(ManagedAttribute.class, filter);
    if (entitlement == null) {
        return;
    }
    ProvisioningPlan.ObjectRequest or = new ProvisioningPlan.ObjectRequest();
    or.setApplication(appName);
    or.setType(entitlement.isGroupType() ? entitlement.getType() : ProvisioningPlan.OBJECT_TYPE_MANAGED_ATTRIBUTE);
    String nativeIdentity = entitlement.getNativeIdentity();
    if (ManagedAttribute.Type.Permission.name().equalsIgnoreCase(entitlement.getType())) {
        nativeIdentity = entitlement.getAttribute();
    }
    or.setNativeIdentity(nativeIdentity);
    or.setOp(ProvisioningPlan.ObjectOperation.Delete);
    AttributeRequest referenceAttribute = new AttributeRequest(ManagedAttribute.PROV_ATTRIBUTE, entitlement.getAttribute());
    AttributeRequest typeAttribute = new AttributeRequest(ManagedAttribute.PROV_MANAGED_ATTRIBUTE_TYPE, entitlement.getType().toString());
    or.setAttributeRequests(Arrays.asList(new AttributeRequest[] { referenceAttribute, typeAttribute }));

    ProvisioningPlan plan = new ProvisioningPlan();
    plan.setSource(Source.RapidSetup);
    String contextUserName = context.getUserName();
    Identity contextIdentity = context.getObject(Identity.class, contextUserName);
    plan.addRequester(contextIdentity);
    plan.addRequest(or);

    WorkflowLaunch wfl = new WorkflowLaunch();
    wfl.setTargetClass(ManagedAttribute.class);
    wfl.setTargetId(entitlement.getId());

    wfl.setSessionOwner(contextUserName);

    // this is the default workflow we'll run
    String workflowName = Configuration.WORKFLOW_MANAGED_ATTRIBUTE;
    wfl.setWorkflowRef(workflowName);

    // generate a case name
    String caseName = "Update Account Group " + containerName;
    wfl.setCaseName(caseName);

    Attributes vars = new Attributes();
    vars.put("plan", plan);
    wfl.setVariables(vars);

    // launch a session
    Workflower wf = new Workflower(context);
    WorkflowSession session = wf.launchSession(wfl);
  ]]>
  </Source>
</Rule>

</sailpoint>
