<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="SNAP-Rule-DormantPolicyGSuite" type="Policy">
  <Description>This rule is used to determine if a Policy has been violated.</Description>
  <Signature returnType="PolicyViolation">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity">
        <Description>
          The Identity being inspected.
        </Description>
      </Argument>
      <Argument name="policy">
        <Description>
          The Policy being evaluated.
        </Description>
      </Argument>
      <Argument name="constraint">
        <Description>
          The Constraint being evaluated.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="violation">
        <Description>
          The PolicyViolation object.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import java.util.Iterator;
import sailpoint.object.Identity;
import sailpoint.object.Application;
import sailpoint.object.QueryOptions;
import sailpoint.object.Filter;
import sailpoint.object.Link;
import sailpoint.object.Policy;
import sailpoint.object.PolicyViolation;
import java.util.Date;
import java.text.SimpleDateFormat;

String idName = identity.getName();
Identity idt = context.getObjectByName(Identity.class, idName);

PolicyViolation v = null;

if (null == idt ) {
 return false;
}

QueryOptions qo = new QueryOptions();
qo.addFilter(Filter.eq("identity", idt));

Iterator it = context.search(Link.class, qo);

while (it.hasNext()) {
 Link link = (Link) it.next();
 String appName = link.getApplication().getName();
 String acctName = link.getNativeIdentity();
 
	if (appName.equalsIgnoreCase("SNAP G Suite")){

	String lastLogon = link.getAttribute("lastLoginTime");
	
		if (lastLogon == null || lastLogon == void){
		return false;
		} else {	
		SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss a");
		
		Date today = new Date();
		Date lastLogonParse = sdf.parse(lastLogon);

		int betweenDays = 0;
		long between = today.getTime() - lastLogonParse.getTime();
		betweenDays = (int) (between / (24 * 60 * 60 * 1000));
	
        if (betweenDays &gt;= 30){		
				
				
				v = new PolicyViolation();
				v.setActive(true);
				v.setIdentity(identity);
				v.setPolicy(policy);
				v.setConstraint(constraint);
				v.setDescription("[Last Login Date [" + lastLoginDateStr  + "] is more than 30 days ago.]");
				v.setStatus(sailpoint.object.PolicyViolation.Status.Open);
					if (identity.getManager()!=null) {
						v.setOwner(identity.getManager());
					} else {
						v.setOwner(context.getObjectByName(Identity.class,"spadmin"));
					}
						
			} else {
				//No policy violation
			}
	
		}
		
	}
				
}
sailpoint.tools.Util.flushIterator(it);
context.commitTransaction();
context.decache();
return v;
</Source>
</Rule>