<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" libraries="Identity" name="PILMICO-Workflow-Joiner-Gsuite" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("fullName");</Source>
    </Script>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.</Description>
  </Variable>
  <Variable initializer="string:AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan which is built during the workflow.</Description>
  </Variable>
  <Variable initializer="string:LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="string:true" input="true" name="trace">
    <Description>Used for debugging this workflow and when set to true trace  
       will be sent to stdout.</Description>
  </Variable>
  <Variable name="project">
    <Description>ProvisioningProject which is just a compiled version of the ProvisioningPlan.</Description>
  </Variable>
  <Variable input="true" name="pwd"/>
  <Variable name="sAMAccountName">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("sAMAccountName");</Source>
    </Script>
  </Variable>
  <Variable name="password"/>
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.</Description>
  </Variable>
  <Variable initializer="AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan which is built during the workflow.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="true" input="true" name="trace">
    <Description>Used for debugging this workflow and when set to true trace  
       will be sent to stdout.</Description>
  </Variable>
  <Variable name="project">
    <Description>ProvisioningProject which is just a compiled version of the ProvisioningPlan.</Description>
  </Variable>
  <Variable initializer="true" input="true" name="noTriggers"/>
  <Variable input="true" name="pwd"/>
  <Variable name="userName">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("employeeId");</Source>
    </Script>
  </Variable>
  <Variable name="password"/>
  <Variable name="fullName">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("displayName");</Source>
    </Script>
  </Variable>
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("fullName");</Source>
    </Script>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.</Description>
  </Variable>
  <Variable initializer="AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan which is built during the workflow.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="true" input="true" name="trace">
    <Description>Used for debugging this workflow and when set to true trace  
       will be sent to stdout.</Description>
  </Variable>
  <Variable name="project">
    <Description>ProvisioningProject which is just a compiled version of the ProvisioningPlan.</Description>
  </Variable>
  <Variable input="true" name="pwd"/>
  <Variable name="sAMAccountName">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("domainID");</Source>
    </Script>
  </Variable>
  <Variable name="password"/>
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>The displayName of the identity being updated.  
       Query for this using a projection query and fall back to the name.</Description>
  </Variable>
  <Variable initializer="AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan which is built during the workflow.</Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>String version of sailpoint.object.Source to indicate  
       where the request originated.  Defaults to LCM.</Description>
  </Variable>
  <Variable initializer="true" input="true" name="trace">
    <Description>Used for debugging this workflow and when set to true trace  
       will be sent to stdout.</Description>
  </Variable>
  <Variable name="project">
    <Description>ProvisioningProject which is just a compiled version of the ProvisioningPlan.</Description>
  </Variable>
  <Variable initializer="true" input="true" name="noTriggers"/>
  <Variable input="true" name="pwd"/>
  <Variable name="userName">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("employeeId");</Source>
    </Script>
  </Variable>
  <Variable name="password"/>
  <Variable name="fullName">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("displayName");</Source>
    </Script>
  </Variable>
  <Variable initializer="true" input="true" name="doRefresh"/>
  <Variable input="true" name="email">
    <Script>
      <Source>Identity identityObject =context.getObjectByName(Identity.class, identityName);
identityObject.getAttribute("email");</Source>
    </Script>
  </Variable>
  <Variable input="true" name="newIdentityEmail">
    <Script>
      <Source>import sailpoint.object.Identity;

Identity identity = context.getObjectByName(Identity.class, identityName);

System.out.println("NEW IDENTITY");
if( (identity.getEmail() != null) ) {

System.out.println("NEW IDENTITY GET EMAIL : " + event.getNewObject().getEmail());
if (event.getNewObject().getEmail() == null) {
String email = "";
return email;
}
else{
return event.getNewObject().getEmail();
}
}
else {
return null;
}</Source>
    </Script>
  </Variable>
  <Variable input="true" name="previousIdentityEmail">
    <Script>
      <Source>import sailpoint.object.Identity;

Identity identity = context.getObjectByName(Identity.class, identityName);

System.out.println("OLD IDENTITY");
if( (identity.getEmail() != null) ) {

System.out.println("OLD IDENTITY GET EMAIL : " + event.getOldObject().getEmail());
if (event.getOldObject().getEmail() == null) {
String email= "";
return email;
}
else{
return event.getOldObject().getEmail();
}
}
else {
return null;
}</Source>
    </Script>
  </Variable>
  <Description>Enable birthright accounts when an employee joins the company.</Description>
  <Step icon="Start" name="Start" posX="28" posY="10">
    <Transition to="Password"/>
  </Step>
  <Step icon="Stop" name="end" posX="1499" posY="22"/>
  <Step action="rule:PILMICO-Rule-SendEmailJoinerGSuite" icon="Email" name="SendEmail" posX="1046" posY="127">
    <Arg name="template" value="AEV-EmailTemplate-CreateAccountGSuite"/>
    <Arg name="to" value="rey.pejero@abotiz.com"/>
    <Arg name="userName" value="ref:userName"/>
    <Arg name="pwd" value="ref:pwd"/>
    <Description>Send an email to Manager containing the credentials of new employee</Description>
    <Transition to="end">
      <Script>
        <Source>import sailpoint.object.Identity;
Identity identity = context.getObjectByName(Identity.class, identityName);

String appEmail = identity.getAttribute("email");
System.out.println("==============HR AND GSUITE EMAIL IS THE SAME DO NOTHING ==================" + (previousIdentityEmail.equalsIgnoreCase(appEmail)));

(previousIdentityEmail.equalsIgnoreCase(appEmail))

</Source>
      </Script>
    </Transition>
    <Transition to="Not Same Email Notif">
      <Script>
        <Source>import sailpoint.object.Identity;
Identity identity = context.getObjectByName(Identity.class, identityName);

String appEmail = identity.getAttribute("email");
  System.out.println("==============HR AND GSUITE EMAIL IS NOT THE SAME SEND EMAIL NOTIF ==================" + (!previousIdentityEmail.equalsIgnoreCase(appEmail)));
(!previousIdentityEmail.equalsIgnoreCase(appEmail))
</Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Default" name="Set Password" posX="190" posY="10">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="pwd" value="ref:pwd"/>
    <Script>
      <Source>import sailpoint.api.PasswordGenerator;
import sailpoint.object.PasswordPolicy;
import sailpoint.object.Identity; 

Identity identity = context.getObjectByName(Identity.class, identityName);

       identity.setPassword(pwd);

context.saveObject(identity);  
context.commitTransaction();
context.decache(identity);
</Source>
    </Script>
    <Transition to="Birthright Plan for G Suite"/>
  </Step>
  <Step action="refreshIdentity" icon="Default" name="Refresh Identity" posX="729" posY="11">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="promoteAttributes" value="true"/>
    <Arg name="correlateEntitlements" value="true"/>
    <Arg name="synchronizeAttributes" value="true"/>
    <Transition to="Send Email Denied">
      <Script>
        <Source>import sailpoint.object.IdentityRequest;
import sailpoint.object.IdentityRequestItem;
import sailpoint.object.TaskResult;
import sailpoint.object.WorkItem;
import sailpoint.object.WorkItem.State;
import sailpoint.object.*;
import sailpoint.workflow.*;
import java.util.*;
import sailpoint.object.WorkflowSummary.ApprovalSummary;

String state = "";

IdentityRequest ireq = context.getObjectByName(IdentityRequest.class, identityRequestId);

List aSummaries = ireq.getApprovalSummaries();

for(WorkflowSummary.ApprovalSummary as : aSummaries){
 System.out.println("Approval Summary State: " + as.getState());
 state = as.getState().toString();
}

System.out.println(state.equalsIgnoreCase("Expired") || state.equalsIgnoreCase("Rejected")|| state.equalsIgnoreCase("Canceled"));

(state.equalsIgnoreCase("Expired") || state.equalsIgnoreCase("Rejected") || state.equalsIgnoreCase("Canceled"));</Source>
      </Script>
    </Transition>
    <Transition to="SendEmail">
      <Script>
        <Source>import sailpoint.object.IdentityRequest;
import sailpoint.object.IdentityRequestItem;
import sailpoint.object.TaskResult;
import sailpoint.object.WorkItem;
import sailpoint.object.WorkItem.State;
import sailpoint.object.*;
import sailpoint.workflow.*;
import java.util.*;
import sailpoint.object.WorkflowSummary.ApprovalSummary;

String state = "";

IdentityRequest ireq = context.getObjectByName(IdentityRequest.class, identityRequestId);

List aSummaries = ireq.getApprovalSummaries();

for(WorkflowSummary.ApprovalSummary as : aSummaries){
  System.out.println("Approval Summary State: " + as.getState());
  state = as.getState().toString();
}

System.out.println(state.equalsIgnoreCase("Finished"));

state.equalsIgnoreCase("Finished");</Source>
      </Script>
    </Transition>
  </Step>
  <Step icon="Default" name="Birthright Plan for G Suite" posX="318" posY="10" resultVariable="plan">
    <Arg name="password" value="ref:password"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userName" value="ref:userName"/>
    <Arg name="pwd" value="ref:pwd"/>
    <Script>
      <Source>// Creating Birthright Provisioning Plan
import sailpoint.object.ProvisioningPlan;
import sailpoint.object.ProvisioningPlan.AccountRequest;
import sailpoint.object.ProvisioningPlan.AttributeRequest;
import sailpoint.object.Identity;          
import java.util.List;
import java.util.ArrayList;                        

ProvisioningPlan plan = new ProvisioningPlan();

Identity identityObject = context.getObjectByName(Identity.class, identityName);

List accreqs = new ArrayList();

// Set account request for AD
//AccountRequest acctReq = new AccountRequest();
//acctReq.setOperation(AccountRequest.Operation.Create);
//acctReq.setApplication("SNAP Active Directory");

// Set account request for GSuite
AccountRequest acctReq2 = new AccountRequest();
acctReq2.setOperation(AccountRequest.Operation.Create);
acctReq2.setApplication("AEV G Suite");

//accreqs.add(acctReq);
accreqs.add(acctReq2);

plan.setAccountRequests(accreqs);

plan.setIdentity(identityObject);
context.decache(identityObject );

return plan;</Source>
    </Script>
    <Transition to="Provision G Suite"/>
  </Step>
  <Step icon="Default" name="Provision G Suite" posX="562" posY="7" resultVariable="identityRequestId">
    <Arg name="identityEmailTemplate"/>
    <Arg name="enableRetryRequest"/>
    <Arg name="securityOfficerElectronicSignature"/>
    <Arg name="fallbackApprover"/>
    <Arg name="endOnManualWorkItems"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="policiesToCheck"/>
    <Arg name="project"/>
    <Arg name="workItemComments"/>
    <Arg name="approvalSplitPoint"/>
    <Arg name="identityRequestId"/>
    <Arg name="source"/>
    <Arg name="identityDisplayName"/>
    <Arg name="foregroundProvisioning"/>
    <Arg name="ownerElectronicSignature"/>
    <Arg name="batchRequestItemId"/>
    <Arg name="splitPlans"/>
    <Arg name="doRefresh"/>
    <Arg name="plan"/>
    <Arg name="flow"/>
    <Arg name="identityElectronicSignature"/>
    <Arg name="identityName"/>
    <Arg name="approvalSet"/>
    <Arg name="filterRejects"/>
    <Arg name="violationReviewDecision"/>
    <Arg name="splitProjects"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="approvalEmailTemplate"/>
    <Arg name="ticketManagementApplication"/>
    <Arg name="securityOfficerName"/>
    <Arg name="approvingIdentities"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="ticketId"/>
    <Arg name="approvalScheme"/>
    <Arg name="allowRequestsWithViolations"/>
    <Arg name="workItemPriority"/>
    <Arg name="managerElectronicSignature"/>
    <Arg name="requireViolationReviewComments"/>
    <Arg name="splitApprovalSet"/>
    <Arg name="approvalMode"/>
    <Arg name="trace"/>
    <Arg name="endOnProvisioningForms"/>
    <Arg name="splitWorkItemComments"/>
    <Arg name="notificationScheme"/>
    <Arg name="policyViolations"/>
    <Arg name="policyScheme"/>
    <Arg name="setPreviousApprovalDecisions"/>
    <Arg name="optimisticProvisioning"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="approvalSet"/>
    <Return name="policyViolations" to="policyViolations"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="violationReviewDecision" to="violationReviewDecision"/>
    <Return merge="true" name="workItemComments" to="workItemComments"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="ABOITIZ-Workflow-LCM Provisioning-WithApproval"/>
    </WorkflowRef>
    <Transition to="Refresh Identity"/>
  </Step>
  <Step action="rule:PILMICO-Rule-JoinerGSuiteDenied" icon="Default" name="Send Email Denied" posX="1054" posY="7">
    <Transition to="end"/>
  </Step>
  <Step icon="Default" name="Password" posX="98" posY="10" resultVariable="pwd">
    <Script>
      <Source>import sailpoint.api.PasswordGenerator;
import sailpoint.object.PasswordPolicy;

PasswordPolicy policy = context.getObjectByName(PasswordPolicy.class,"AD Password Policy");
String password = "";

if(policy != null){
	PasswordGenerator psswdGen = new PasswordGenerator(context);
	password = psswdGen.generatePassword(policy);

return password;
}
</Source>
    </Script>
    <Transition to="Set Password"/>
  </Step>
  <Step action="rule:PILMICO-Rule-NotSameEmail" configForm="Provisioning Notification Step Form" icon="Email" name="Not Same Email Notif" posX="1414" posY="100">
    <Arg name="requesterEmail" value="script:getEmail(launcher)"/>
    <Arg name="otherUsersToNotifyEmailTemplate"/>
    <Arg name="notificationScheme"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="userEmailTemplate"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="managerEmail" value="script:getManagersEmail(identityName, plan)"/>
    <Arg name="appEmail">
      <Script>
        <Source>import sailpoint.object.Identity;
Identity identity = context.getObjectByName(Identity.class, identityName);

String appEmail = identity.getAttribute("email");
return appEmail;</Source>
      </Script>
    </Arg>
    <Arg name="otherUsersToNotify"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="newIdentityEmail" value="ref:newIdentityEmail"/>
    <Arg name="requesterEmailTemplate"/>
    <Arg name="userEmail" value="script:getUserEmail(identityName, plan)"/>
    <Arg name="securityOfficerName"/>
    <Arg name="securityOfficerEmailTemplate"/>
    <Arg name="previousIdentityEmail" value="ref:previousIdentityEmail"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="hrEmail" value="ref:previousIdentityEmail"/>
    <Arg name="managerEmailTemplate"/>
    <Arg name="flow" value="ref:flow"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Description>
      	  Notify the various actors specified on notification scheme. This notification will be sent out once the Email of the Identity from HR is not the Same with the Email created in GSuite         </Description>
    <Transition to="end"/>
  </Step>
</Workflow>