<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="AEV-Rule-ProvPolicyDN" type="FieldValue">
  <Description>This rule can be used to generate a field value (eg - an account name) using data from the given Identity. If this rule is run in the context of a workflow step then the arguments passed into the step will also be available. Also, any field values that have been processed so far from the policy related to the Application/Role will be available.</Description>
  <ReferencedRules>
    <Reference class="sailpoint.object.Rule" name="AEV-RuleLibray-ProvPolicyAD"/>
  </ReferencedRules>
  <Signature returnType="String">
    <Inputs>
      <Argument name="log">
        <Description>
          The log object associated with the SailPointContext.
        </Description>
      </Argument>
      <Argument name="context">
        <Description>
          A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
        </Description>
      </Argument>
      <Argument name="identity" type="Identity">
        <Description>
          The Identity object that represents the user needing the field value.
        </Description>
      </Argument>
      <Argument name="link" type="Link">
        <Description>
          The sailpoint.object.Link that is being acted upon. If the link is not applicable,
          this value will be null.
        </Description>
      </Argument>
      <Argument name="group" type="ManagedAttribute">
        <Description>
          The sailpoint.object.ManagedAttribute that is being acted upon. If the managed attribute
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="project" type="ProvisioningProject">
        <Description>
          The provisioning project being acted upon. If a provisioning project is not applicable,
          the value will be null.
        </Description>
      </Argument>
      <Argument name="accountRequest" type="ProvisioningPlan.AccountRequest">
        <Description>
          The account request. If an account request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="objectRequest" type="ProvisioningPlan.ObjectRequest">
        <Description>
          The object request. If an object request is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="role" type="Bundle">
        <Description>
          The role with the template we are compiling. If the role is
          not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="application" type="Application">
        <Description>
          The sailpont.object.Application with the template we are compiling. If the application
          is not applicable, the value will be null.
        </Description>
      </Argument>
      <Argument name="template" type="Template">
        <Description>
          The Template that contains this field.
        </Description>
      </Argument>
      <Argument name="field" type="Field">
        <Description>
          The current field being computed.
        </Description>
      </Argument>
      <Argument name="current" type="Object">
        <Description>
          The current value corresponding to the identity or account attribute that the field represents.
          If no current value is set, this value will be null.
        </Description>
      </Argument>
      <Argument name="operation" type="ProvisioningPlan.Operation">
        <Description>
          The operation being performed.
        </Description>
      </Argument>
    </Inputs>
    <Returns>
      <Argument name="value">
        <Description>
          The string value created.
        </Description>
      </Argument>
    </Returns>
  </Signature>
  <Source>import java.util.*;  
import java.lang.*;  
import sailpoint.object.QueryOptions;
import sailpoint.object.Filter;
import sailpoint.object.Identity;

	String firstname = identity.getFirstname();
	String lastname = identity.getLastname();
	String company = identity.getAttribute("companyCode");
	String unit = identity.getAttribute("unitName");
	String department = identity.getAttribute("department");
	String location = identity.getAttribute("location");
	String middlename = identity.getAttribute("middleName");
	String source = identity.getAttribute("source");
  String businessunitname = identity.getAttribute("company");
	String ou = "";


if (company == null || company == void) {
company = "";
}
if (unit == null || unit == void) {
unit = "";	
}
if (department == null || department == void) {
department = "";	
}
if (location == null || location == void) {
location = "";	
}
if (middlename == null || middlename == void) {
unit = "";	
}
if (source == null || source == void) {
source = "";
}
  
  if (source.equalsIgnoreCase("Outsource") &amp;&amp; identity.getManager() != null) {
  String dn = identity.getManager().getAttribute("dn");  
  String[] splitOu = dn.split(",");
  
  for (int i = 1; i &lt; (splitOu.length); i ++){
    ou += splitOu[i] + ",";
	} 
    	ou = "," + ou.substring(0, ou.length() - 1);
 } else {
	 ou = ouMapping(businessunitname,company,department,unit,location,source);
}
	
	String firstLastname = firstname.charAt(0).toString() + lastname;
	String fullName = firstname + " " + lastname;
  
	String checkDn = "CN=" + fullName + ou;

	int counterMiddleName = 0;
	String middleNameBuild = "";
	String counterDnN = "";
	int counterDnName = 0;
	
	counterDnN = queryFilter(checkDn);
	counterDnName = Integer.parseInt(counterDnN);  

	if (counterDnName == 0 ){
	return checkDn;
	} else {
	if (middlename != null) {	
 	
	for (int i = 0; i &lt; (middlename.length()); i ++){
		counterMiddleName ++;
		middleNameBuild += middlename.charAt(counterMiddleName - 1);
		checkDn = "CN=" + firstname + " " + middleNameBuild + " " + lastname + ou;
	
		//Quering using queryFilter function
		counterDnN = queryFilter(checkDn);
		counterDnName = Integer.parseInt(counterDnN); 
		
		if (counterDnName == 0 ){
		return checkDn;
	  } 
	}
	
	counterDnN = queryFilter(checkDn);
	counterDnName = Integer.parseInt(counterDnN); 
   
	
	i = 1;
	while ( i &lt;= 50) {
		checkDn = "CN=" + firstname + " " +  middlename + i.toString() + " " + lastname + ou;
	
		i++;
		
		//Quering using queryFilter function
		counterDnN = queryFilter(checkDn);
		counterDnName = Integer.parseInt(counterDnN); 
		
	if (counterDnName == 0 ){	
		return checkDn;	
	}
	}
} 
else {
	i = 1;
	while ( i &lt;= 50) {
		checkDn = "CN=" + firstname  + " " + lastname  + i.toString() + ou;
		
		i++;
		
		//Quering using queryFilter function
		counterDnN = queryFilter(checkDn);
		counterDnName = Integer.parseInt(counterDnN); 
		
	if (counterDnName == 0 ){
		return checkDn;	
	}
	}
}
} 
</Source>
</Rule>