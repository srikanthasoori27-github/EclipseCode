<?xml version="1.0" encoding="UTF-8"?>
<project name="accelerator.pack.build" default="-acceleratorPackwar">
    <import file="AcceleratorPackBuildScripts/acceleratorpack.filelayout.xml"/>
    <import file="AcceleratorPackBuildScripts/acceleratorpack.java.xml"/>
    <import file="AcceleratorPackBuildScripts/acceleratorpack.junit.xml"/>
    <import file="AcceleratorPackBuildScripts/acceleratorpack.config.xml"/>
    <import file="AcceleratorPackBuildScripts/acceleratorpack.dev.xml"/>
    <import file="AcceleratorPackBuildScripts/acceleratorpack.distribution.xml"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    <taskdef name="build-init" classname="sailpoint.services.tools.ant.BuildInitTask">
        <classpath>
            <pathelement location="lib/services-tools.jar"/>
        </classpath>
    </taskdef>

    <!-- ********************************************************** -->
    <!-- Target: custom-properties                                  -->
    <!-- ********************************************************** -->
    <target name="custom-properties">

        <!--
        Get properties from build.user.properties first, then build.properties. This allows customized
        properties to take precedence.
        -->
        <property file="build.user.properties" />
        <property file="build.properties" />

    </target>

    <target name="init-properties" depends="custom-properties">

        <!-- Load env variables -->
        <property environment="env" />

        <!-- Are we creating a patch version -->
        <condition property="isPatch" value="true">
          <and>
            <isset property="AcceleratorPack.PatchLevel"/>
            <not><equals arg1="${AcceleratorPack.PatchLevel}" arg2="" /></not>
          </and>
        </condition>

        <echo>Validate IIQ property File</echo>
        <if>
            <!-- Test for the target property files before continuing -->
            <not>
                <and>
                    <available file="iiq.properties"/>
                </and>
            </not>
            <then>
                <fail message="Error: ${line.separator}
                Can't find iiq.properties. Required for db connection"/>
            </then>
        </if>
        <!-- common directories -->
        <property name="build" location="build"/>
        <property name="build.iiqBinaryExtract" location="${build}/extract"/>
        <property name="build.acceleratorPackXMLDir" location="${build.iiqBinaryExtract}/WEB-INF/config/AcceleratorPack"/>
    	<!-- DTD file -->
        <property name="dtd" location="${build.iiqBinaryExtract}/sailpoint.${IIQVersion}${IIQPatchLevel}.dtd"/>
        <echo>DTD File ${dtd}</echo>
    </target>
	 <!-- Build XML Default is acceleratorpack -->
    <target name="-acceleratorpack" depends="init-properties">
     <!-- laydown initial binaries and custom static web content -->
        <antcall inheritall="true" target="-iiqBinaries"/>
        <!-- Compile AcceleratorPack Java Files and Create a Jar File -->
        <antcall inheritall="true" target="-moveAcceleratorPackJar"/>
       <!--DTD Generation-->
        <antcall inheritall="true" target="-generateDTD"/>
        <!-- DB Connection-->
        <antcall inheritall="true" target="-copyIIQFile"/>
        <antcall target="-cleanUpFromFailure"/>
    </target>
    <target name="-acceleratorPackwar" depends="-acceleratorpack">
         <!-- package a war file for deployment -->
        <war destfile="build/deploy/identityiq.war">
            <fileset dir="${build.iiqBinaryExtract}"/>
        </war>
        <checksum file="build/deploy/identityiq.war" forceOverwrite="yes"/>
        <echo>A MD5 checksum was generated for this war file and placed in the war file directory. Keep this checksum to diagnose potential version issues</echo>
    </target>
    <target name="-cleanUpFromFailure" if="critical.failure">
        <antcall target="-clean"/>
        <fail message="${critical.failure}"/>
    </target>
    <target name="-clean">
        <delete dir="build"  deleteonexit="true"/>
        <delete dir="tmp"  deleteonexit="true"/>
    </target>

    <target name="jenkinsbuild" depends="-clean,zipRelease" />

    <!-- ********************************************************** -->
    <!-- Target: publishbuild                                       -->
    <!-- ********************************************************** -->
    <target name="publishbuild" depends="init-properties,init" if="isReleaseCandidate">
        <!-- Make sure that remote directory is there -->
          <property name="publishdir" value="${publish.basedir}/${build.repoLocation}_${build.revision.timestamp}"/>
          <echo message="Making directory on ${publish.server}: ${publishdir}" />
          <exec executable="ssh" failonerror="true">
                <arg value="${publish.user}@${publish.server}" />
                <arg value="set -e; mkdir -p ${publishdir}"/>
          </exec>

          <!-- Copy all bits to ${publish.server} -->
          <echo message="Copying build to ${publish.server}" />
          <exec executable="scp" failonerror="true">
                <arg value="-rp" />
                <arg value="${basedir}/." />
                <arg value="${publish.user}@${publish.server}:${publishdir}/" />
          </exec>
    </target>

</project>
