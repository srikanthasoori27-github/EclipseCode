<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<!-- Copyright Â© 2018 SailPoint Technologies, Inc. All Rights Reserved.
All logos, text, content, and works of authorship, including but not limited to underlying code, programming or scripting language, designs, and/or graphics,
that are used and/or depicted herein are protected under United States and international copyright and trademark laws and treaties,
and may not be used or reproduced without the prior express written permission of SailPoint Technologies, Inc. -->
<Workflow explicitTransitions="true" name="Workflow-Provisioner" type="LCMProvisioning">
 <Description>Accelerator Pack Workflow</Description>
  <Variable initializer="false" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  	 <Variable input="true" name="plan">
    <Description>ProvisioningPlan.</Description>
  </Variable>
	  <Step icon="Start"  name="Start" >
	     <Transition to="Call Provisioner" />
	  </Step>
	<Step name="Call Provisioner">
		<Script>
		<Source><![CDATA[
		 import org.apache.commons.logging.Log;
		 import org.apache.commons.logging.LogFactory;
		 import sailpoint.rapidapponboarding.logger.LogEnablement;
		 import sailpoint.rapidapponboarding.rule.ROADUtil;
		 import sailpoint.object.Identity;
		 Log provLogger = LogFactory.getLog("rapidapponboarding.rules");
		 LogEnablement.isLogDebugEnabled(provLogger,"identityName..ntext."+identityName);
		if (identityName != null && plan!=null) 
		{
			//Use Provisioner
			Identity identityObj=context.getObjectByName(Identity.class,identityName);
			plan.setIdentity(identityObj);
			LogEnablement.isLogDebugEnabled(provLogger,"Start..launchProvisionerPlan.Workflow-Provisioner.");
			ROADUtil.launchProvisionerPlan(plan,context);
			LogEnablement.isLogDebugEnabled(provLogger,"End..launchProvisionerPlan.Workflow-Provisioner.");
		}
				 ]]>
					</Source>
			</Script>
			<Transition to="end" />
		</Step>
  <Step icon="Stop" name="end" />
</Workflow>
