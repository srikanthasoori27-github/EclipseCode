<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<!-- Copyright Â© 2018 SailPoint Technologies, Inc. All Rights Reserved.
All logos, text, content, and works of authorship, including but not limited to underlying code, programming or scripting language, designs, and/or graphics,
that are used and/or depicted herein are protected under United States and international copyright and trademark laws and treaties,
and may not be used or reproduced without the prior express written permission of SailPoint Technologies, Inc. -->
<Workflow handler="sailpoint.api.StandardWorkflowHandler" libraries="Identity" name="Workflow-Change-Password">
<Description>Accelerator Pack Change Password Workflow</Description>
<Variable input="true" name="quickLinkIdentityId"/>
<Variable initializer="true" name="transient">
</Variable>
  <Variable input="true" name="launcher"/>
  <Variable  name="verificationForm"/>
  <Variable  name="source" initializer="LCM"/>
  <Variable  name="inValidPlan"/>
  <Variable input="true" name="requestor"/>
  <Variable  name="flow" initializer="PasswordsChangeRequest" />
  <Variable  name="workItemComments" initializer="Password Changed"/>
   <Variable  name="confirmationMessage"  initializer="The password change request has been successfully submitted. A successful provisioning completion email will be sent out to you for password change."/>
  <Variable initializer="false" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable  name="requestType" initializer="CHANGE PASSWORD FEATURE">
    <Description>
     </Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable name="spExtAttrs" />
  <Variable name="foregroundProvisioning" initializer="string:false" />
  <Variable name="identityModel"/>
  <Variable name="isSelfService"/>
  <Variable name="password"/>
  <Variable name="policy"/>
  <Variable name="plan"/>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule" name="Rule-ChangePasswordRulesLibrary" />
  </RuleLibraries>
  <Step icon="Start" name="Start">
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize">
    <Script>
      <Source>
        <![CDATA[
        import sailpoint.object.Identity;
        import sailpoint.tools.Util;
        if (quickLinkIdentityId != void && Util.isNotNullOrEmpty(quickLinkIdentityId)) {
          Identity ident = context.getObject(Identity.class, quickLinkIdentityId);
          if (ident != null) {
            String name = ident.getName();
            workflow.put("identityName", name);
            workflow.put("policy", generateUnifiedPasswordPolicy(ident));
            workflow.put("isSelfService", Util.nullSafeEq(launcher, name));
          }
        }
        ]]>
      </Source>
    </Script>
    <Transition to="Stop" when="script:(identityName == null)"/>
    <Transition to="Input Password" when="script:(isTrue(isSelfService))"/>
    <Transition to="Get Identity Model" when="script:(isFalse(isSelfService))"/>
  </Step>
  <Step icon="Task" name="Input Password">
    <Approval owner="ref:launcher" return="password" send="identityName, policy">
      <Form>
        <Section label="Instructions" name="instructions" type="text">
          <Field value="Please enter and confirm your new password below, adhering to the following constraints:"/>
          <Field>
            <Script>
              <Source>
                <![CDATA[
                String constraints = "";
                if (policy != null) {
                  for (String constraint : policy.convertConstraints()) {
                    constraints += constraint + "<br/>";
                  }
                }
                return constraints;
                ]]>
              </Source>
            </Script>
          </Field>
        </Section>
        <Section name="password">
          <Field displayName="Password" name="password" type="secret" required="true">
            <ValidationScript>
              <Includes>
                <Reference class="sailpoint.object.Rule" name="Rule-ChangePasswordRulesLibrary"/>
              </Includes>
              <Source>
                <![CDATA[
                return validatePassword(identityName, value, policy);
                ]]>
              </Source>
            </ValidationScript>
          </Field>
          <Field displayName="Confirm Password" name="confirm" type="secret" required="true">
            <ValidationScript>
              <Includes>
                <Reference class="sailpoint.object.Rule" name="Rule-ChangePasswordRulesLibrary"/>
              </Includes>
              <Source>
                <![CDATA[
                return validateConfirmPassword(form.getField("password").getValue(), value);
                ]]>
              </Source>
            </ValidationScript>
          </Field>
        </Section>
        <Button label="Submit" action="next"/>
        <Button label="Cancel" action="back"/>
      </Form>
    </Approval>
    <Description>
       Display the password input form to collect the new password from the user.
    </Description>
    <Transition to="Build Plan" when="approved"/>
    <Transition to="Stop"/>
  </Step>
  <Step action="call:getIdentityModel" icon="Task" name="Get Identity Model" resultVariable="identityModel">
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="expandIdentity" value="true"/>
    <Description>
       Initialize the identity data for the selected user.
    </Description>
    <Transition to="Build Verification Form"/>
  </Step>
 <Step name="Build Verification Form" resultVariable="verificationForm">
			<Script>
				<Source>
					<![CDATA[ 
					 return buildVerificationForm(identityModel);
					]]>
				</Source>
			</Script>
	<Transition to="Verify Identity" />
	</Step>
  <Step icon="Task" name="Verify Identity">
    <Approval owner="ref:launcher">
      	<Arg name="workItemFormBasePath" value="identityModel"/>
     	<Arg name="workItemForm" value="ref:verificationForm"/>
    </Approval>
    <Description>
       Display the selected user's information so their identity can be verified.
    </Description>
    <Transition to="Generate Password" when="approved"/>
    <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Generate Password">
    <Script>
      <Source>
        <![CDATA[
        workflow.put("password", generatePassword(policy));
        ]]>
      </Source>
    </Script>
    <Transition to="Build Plan"/>
  </Step>
  <Step icon="Task" name="Build Plan" resultVariable="inValidPlan">
    <Script>
      <Source>
        <![CDATA[
        ProvisioningPlan passwordPlan = buildPasswordPlan(identityName, password, isSelfService,workflow);
        if(passwordPlan==null || passwordPlan.isEmpty() || passwordPlan.getAccountRequests() == null)
        {
        return "Failed";
        }
        else
        {
        workflow.put("plan", passwordPlan);
        // optimistically update password history to prevent password interceptor looping
        updatePasswordHistory(identityName, password, policy);
        return "Passed";
        }
        ]]>
      </Source>
    </Script>
    <Transition to="Display Password Form" when="script:(isFalse(isSelfService))"/>
    <Transition to="Display Confirmation" when="script:(isTrue(isSelfService))"/>
  </Step>
  <Step icon="Task" name="Display Confirmation">
    <Approval owner="ref:launcher" send="confirmationMessage">
      <Form>
        <Section label="Request Submitted" name="confirmation" type="text">
          <Field name="Confirmation Message" value="ref:confirmationMessage"/>
        </Section>
        <Button label="Complete" action="next"/>
      </Form>
    </Approval>
    <Transition to="Provision Password" when="script:inValidPlan!=void &amp;&amp; inValidPlan!=null &amp;&amp; inValidPlan.equalsIgnoreCase(&quot;Passed&quot;)" />
   <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Display Password Form">
    <Approval owner="ref:launcher" send="password">
      <Form>
        <Section label="Request Submitted" name="confirmation" type="text">
          <Field value="Please submit password change request using temporary password. A temporary password email will be sent out to user. User may be prompted to change it when they next login."/>
        </Section>
        <Section name="password" type="datatable">
          <Field displayName="Password" name="password"/>
        </Section>
        <Button label="Submit Password Change Request" action="next"/>
      </Form>
    </Approval>
  <Transition to="Provision Password" when="script:inValidPlan!=void &amp;&amp; inValidPlan!=null &amp;&amp; inValidPlan.equalsIgnoreCase(&quot;Passed&quot;)" />
   <Transition to="Stop"/>
  </Step>
  <Step icon="Task" name="Provision Password">
    <Arg name="flow" value="ref:flow"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="requestor" value="ref:launcher"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="requestType" value="ref:requestType" />
    <Arg name="requestor" value="ref:requestor" />
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning" />
    <Arg name="workItemComments" value="ref:workItemComments" />
    <Return name="approvalSet" to="approvalSet"/>
    <Return name="project" to="project"/>
    <Return name="spExtAttrs" to="spExtAttrs"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Workflow-FrameWork-Wrapper"/>      
    </WorkflowRef>
   <Transition to="Stop"/>
  </Step>
  <Step icon="Stop" name="Stop"/>
</Workflow>
